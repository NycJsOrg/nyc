{"version":3,"sources":["../static/js/2.49f83fd7.chunk.js","components/events/Events.js","../node_modules/date-fns/parse/index.js","../node_modules/date-fns/start_of_iso_week/index.js","../node_modules/date-fns/is_date/index.js","../node_modules/date-fns/start_of_week/index.js","../node_modules/date-fns/start_of_day/index.js","../node_modules/date-fns/get_iso_year/index.js","../node_modules/date-fns/add_weeks/index.js","../node_modules/date-fns/add_days/index.js","../node_modules/date-fns/end_of_week/index.js","../node_modules/date-fns/each_day/index.js","components/events/Calendar.js","../node_modules/date-fns/format/index.js","../node_modules/date-fns/get_day_of_year/index.js","../node_modules/date-fns/start_of_year/index.js","../node_modules/date-fns/difference_in_calendar_days/index.js","../node_modules/date-fns/get_iso_week/index.js","../node_modules/date-fns/start_of_iso_year/index.js","../node_modules/date-fns/is_valid/index.js","../node_modules/date-fns/locale/en/index.js","../node_modules/date-fns/locale/en/build_distance_in_words_locale/index.js","../node_modules/date-fns/locale/en/build_format_locale/index.js","../node_modules/date-fns/locale/_lib/build_formatting_tokens_reg_exp/index.js","../node_modules/date-fns/is_past/index.js","../node_modules/date-fns/is_today/index.js","../node_modules/date-fns/is_first_day_of_month/index.js","../node_modules/date-fns/get_month/index.js","services/events.js"],"names":["webpackJsonp","221","module","__webpack_exports__","__webpack_require__","Object","defineProperty","value","global","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","prototype","create","constructor","enumerable","writable","configurable","setPrototypeOf","__proto__","__WEBPACK_IMPORTED_MODULE_0_react__","__WEBPACK_IMPORTED_MODULE_0_react___default","n","__WEBPACK_IMPORTED_MODULE_1_styled_components__","__WEBPACK_IMPORTED_MODULE_2_date_fns_add_weeks__","__WEBPACK_IMPORTED_MODULE_2_date_fns_add_weeks___default","__WEBPACK_IMPORTED_MODULE_3_date_fns_start_of_week__","__WEBPACK_IMPORTED_MODULE_3_date_fns_start_of_week___default","__WEBPACK_IMPORTED_MODULE_4_date_fns_end_of_week__","__WEBPACK_IMPORTED_MODULE_4_date_fns_end_of_week___default","__WEBPACK_IMPORTED_MODULE_5_date_fns_each_day__","__WEBPACK_IMPORTED_MODULE_5_date_fns_each_day___default","__WEBPACK_IMPORTED_MODULE_6__Calendar__","__WEBPACK_IMPORTED_MODULE_7__services_events__","_createClass","defineProperties","target","props","i","length","descriptor","key","protoProps","staticProps","_templateObject","strings","raw","freeze","Container","styled","div","Events","_React$Component","this","_this","getPrototypeOf","state","loading","events","start","startOfWeek","Date","end","endOfWeek","addWeeks","dateRange","eachDay","_this2","getEvents","then","items","setState","ga","a","createElement","React","Component","225","exports","parse","argument","dirtyOptions","isDate","getTime","options","additionalDigits","DEFAULT_ADDITIONAL_DIGITS","Number","dateStrings","splitDateString","parseYearResult","parseYear","date","year","restDateString","parseDate","offset","timestamp","time","parseTime","timezone","parseTimezone","getTimezoneOffset","MILLISECONDS_IN_MINUTE","dateString","timeString","array","split","parseTokenDateTimeDelimeter","parseTokenPlainTime","test","token","parseTokenTimezone","exec","replace","parseTokenYYY","parseTokensYYY","parseTokenYYYYY","parseTokensYYYYY","parseTokenYYYY","yearString","parseInt","slice","parseTokenYY","centuryString","month","week","setUTCFullYear","parseTokenMM","parseTokenDDD","dayOfYear","parseTokenMMDD","day","parseTokenWww","dayOfISOYear","parseTokenWwwD","hours","minutes","parseTokenHH","parseFloat","MILLISECONDS_IN_HOUR","parseTokenHHMM","parseTokenHHMMSS","seconds","timezoneString","absoluteOffset","parseTokenTimezoneZ","parseTokenTimezoneHH","parseTokenTimezoneHHMM","isoYear","fourthOfJanuaryDay","getUTCDay","diff","setUTCDate","getUTCDate","264","startOfISOWeek","dirtyDate","weekStartsOn","265","266","getDay","setDate","getDate","setHours","267","startOfDay","268","getISOYear","getFullYear","fourthOfJanuaryOfNextYear","setFullYear","startOfNextYear","fourthOfJanuaryOfThisYear","startOfThisYear","271","dirtyAmount","amount","addDays","272","273","274","dirtyStartDate","dirtyEndDate","startDate","endDate","endTime","Error","dates","currentDate","push","275","_taggedTemplateLiteral","__WEBPACK_IMPORTED_MODULE_2_date_fns_format__","__WEBPACK_IMPORTED_MODULE_2_date_fns_format___default","__WEBPACK_IMPORTED_MODULE_3_date_fns_is_past__","__WEBPACK_IMPORTED_MODULE_3_date_fns_is_past___default","__WEBPACK_IMPORTED_MODULE_4_date_fns_is_today__","__WEBPACK_IMPORTED_MODULE_4_date_fns_is_today___default","__WEBPACK_IMPORTED_MODULE_5_date_fns_is_first_day_of_month__","__WEBPACK_IMPORTED_MODULE_5_date_fns_is_first_day_of_month___default","__WEBPACK_IMPORTED_MODULE_6_date_fns_get_month__","__WEBPACK_IMPORTED_MODULE_6_date_fns_get_month___default","__WEBPACK_IMPORTED_MODULE_7__TrackableLink__","_templateObject2","_templateObject3","_templateObject4","_templateObject5","DAYS","MONTHS","WeekDay","Day","isPast","isToday","DateLabel","EventIcons","Calendar","_ref","renderWeekDay","renderEvents","filter","e","format","fields","map","event","_event$fields$communi","community","badge","communityName","href","url","src","file","alt","width","height","renderDay","index","isFirstDayOfMonth","getMonth","276","dirtyFormatStr","formatStr","String","locale","localeFormatters","enLocale","formatters","formattingTokensRegExp","isValid","buildFormatFn","formatter","match","removeFormattingTokens","output","Function","input","formatTimezone","delimeter","sign","absOffset","Math","abs","floor","addLeadingZeros","number","targetLength","toString","getDayOfYear","getISOWeek","M","MM","Q","ceil","D","DD","DDD","DDDD","d","E","W","WW","YY","substr","YYYY","GG","GGGG","H","getHours","HH","h","hh","m","getMinutes","mm","s","getSeconds","ss","S","getMilliseconds","SS","SSS","Z","ZZ","X","x","277","differenceInCalendarDays","startOfYear","278","cleanDate","279","dirtyDateLeft","dirtyDateRight","startOfDayLeft","startOfDayRight","timestampLeft","timestampRight","round","MILLISECONDS_IN_DAY","280","startOfISOYear","MILLISECONDS_IN_WEEK","281","fourthOfJanuary","282","isNaN","283","buildDistanceInWordsLocale","buildFormatLocale","distanceInWords","284","localize","count","result","distanceInWordsLocale","one","other","addSuffix","comparison","lessThanXSeconds","xSeconds","halfAMinute","lessThanXMinutes","xMinutes","aboutXHours","xHours","xDays","aboutXMonths","xMonths","aboutXYears","xYears","overXYears","almostXYears","285","months3char","monthsFull","weekdays2char","weekdays3char","weekdaysFull","meridiemUppercase","meridiemLowercase","meridiemFull","MMM","MMMM","dd","ddd","dddd","A","aa","forEach","formatterToken","ordinal","buildFormattingTokensRegExp","rem100","286","formatterKeys","hasOwnProperty","formattingTokens","commonFormatterKeys","concat","sort","reverse","RegExp","join","287","288","289","290","291","fetch","apiServiceURL","response","json"],"mappings":"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","file":"static/js/2.49f83fd7.chunk.js","sourcesContent":["webpackJsonp([2],{\n\n/***/ 221:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* WEBPACK VAR INJECTION */(function(global) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_styled_components__ = __webpack_require__(91);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_date_fns_add_weeks__ = __webpack_require__(271);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_date_fns_add_weeks___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_date_fns_add_weeks__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_date_fns_start_of_week__ = __webpack_require__(266);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_date_fns_start_of_week___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_date_fns_start_of_week__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_date_fns_end_of_week__ = __webpack_require__(273);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_date_fns_end_of_week___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_date_fns_end_of_week__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_date_fns_each_day__ = __webpack_require__(274);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_date_fns_each_day___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_date_fns_each_day__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__Calendar__ = __webpack_require__(275);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__services_events__ = __webpack_require__(291);\nvar _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _templateObject=_taggedTemplateLiteral(['\\n  flex-direction: column;\\n'],['\\n  flex-direction: column;\\n']);function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call&&(typeof call===\"object\"||typeof call===\"function\")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!==\"function\"&&superClass!==null){throw new TypeError(\"Super expression must either be null or a function, not \"+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}function _taggedTemplateLiteral(strings,raw){return Object.freeze(Object.defineProperties(strings,{raw:{value:Object.freeze(raw)}}));}var Container=__WEBPACK_IMPORTED_MODULE_1_styled_components__[\"a\" /* default */].div(_templateObject);var Events=function(_React$Component){_inherits(Events,_React$Component);function Events(props){_classCallCheck(this,Events);var _this=_possibleConstructorReturn(this,(Events.__proto__||Object.getPrototypeOf(Events)).call(this,props));_this.state={loading:true,events:[]};var start=__WEBPACK_IMPORTED_MODULE_3_date_fns_start_of_week___default()(new Date());var end=__WEBPACK_IMPORTED_MODULE_4_date_fns_end_of_week___default()(__WEBPACK_IMPORTED_MODULE_2_date_fns_add_weeks___default()(start,7));_this.dateRange=__WEBPACK_IMPORTED_MODULE_5_date_fns_each_day___default()(start,end);return _this;}_createClass(Events,[{key:'componentDidMount',value:function componentDidMount(){var _this2=this;Object(__WEBPACK_IMPORTED_MODULE_7__services_events__[\"a\" /* getEvents */])().then(function(items){return _this2.setState({events:items,loading:false});});global.ga('set','page','/events');global.ga('send','pageview');}},{key:'render',value:function render(){return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(Container,null,__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('h2',null,'There is always something going on'),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_6__Calendar__[\"a\" /* default */],{dateRange:this.dateRange,events:this.state.events}));}}]);return Events;}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.Component);/* harmony default export */ __webpack_exports__[\"default\"] = (Events);\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(28)))\n\n/***/ }),\n\n/***/ 225:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar isDate = __webpack_require__(265)\n\nvar MILLISECONDS_IN_HOUR = 3600000\nvar MILLISECONDS_IN_MINUTE = 60000\nvar DEFAULT_ADDITIONAL_DIGITS = 2\n\nvar parseTokenDateTimeDelimeter = /[T ]/\nvar parseTokenPlainTime = /:/\n\n// year tokens\nvar parseTokenYY = /^(\\d{2})$/\nvar parseTokensYYY = [\n  /^([+-]\\d{2})$/, // 0 additional digits\n  /^([+-]\\d{3})$/, // 1 additional digit\n  /^([+-]\\d{4})$/ // 2 additional digits\n]\n\nvar parseTokenYYYY = /^(\\d{4})/\nvar parseTokensYYYYY = [\n  /^([+-]\\d{4})/, // 0 additional digits\n  /^([+-]\\d{5})/, // 1 additional digit\n  /^([+-]\\d{6})/ // 2 additional digits\n]\n\n// date tokens\nvar parseTokenMM = /^-(\\d{2})$/\nvar parseTokenDDD = /^-?(\\d{3})$/\nvar parseTokenMMDD = /^-?(\\d{2})-?(\\d{2})$/\nvar parseTokenWww = /^-?W(\\d{2})$/\nvar parseTokenWwwD = /^-?W(\\d{2})-?(\\d{1})$/\n\n// time tokens\nvar parseTokenHH = /^(\\d{2}([.,]\\d*)?)$/\nvar parseTokenHHMM = /^(\\d{2}):?(\\d{2}([.,]\\d*)?)$/\nvar parseTokenHHMMSS = /^(\\d{2}):?(\\d{2}):?(\\d{2}([.,]\\d*)?)$/\n\n// timezone tokens\nvar parseTokenTimezone = /([Z+-].*)$/\nvar parseTokenTimezoneZ = /^(Z)$/\nvar parseTokenTimezoneHH = /^([+-])(\\d{2})$/\nvar parseTokenTimezoneHHMM = /^([+-])(\\d{2}):?(\\d{2})$/\n\n/**\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If an argument is a string, the function tries to parse it.\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n *\n * If all above fails, the function passes the given argument to Date constructor.\n *\n * @param {Date|String|Number} argument - the value to convert\n * @param {Object} [options] - the object with options\n * @param {0 | 1 | 2} [options.additionalDigits=2] - the additional number of digits in the extended year format\n * @returns {Date} the parsed date in the local time zone\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * var result = parse('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Parse string '+02014101',\n * // if the additional number of digits in the extended year format is 1:\n * var result = parse('+02014101', {additionalDigits: 1})\n * //=> Fri Apr 11 2014 00:00:00\n */\nfunction parse (argument, dirtyOptions) {\n  if (isDate(argument)) {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime())\n  } else if (typeof argument !== 'string') {\n    return new Date(argument)\n  }\n\n  var options = dirtyOptions || {}\n  var additionalDigits = options.additionalDigits\n  if (additionalDigits == null) {\n    additionalDigits = DEFAULT_ADDITIONAL_DIGITS\n  } else {\n    additionalDigits = Number(additionalDigits)\n  }\n\n  var dateStrings = splitDateString(argument)\n\n  var parseYearResult = parseYear(dateStrings.date, additionalDigits)\n  var year = parseYearResult.year\n  var restDateString = parseYearResult.restDateString\n\n  var date = parseDate(restDateString, year)\n\n  if (date) {\n    var timestamp = date.getTime()\n    var time = 0\n    var offset\n\n    if (dateStrings.time) {\n      time = parseTime(dateStrings.time)\n    }\n\n    if (dateStrings.timezone) {\n      offset = parseTimezone(dateStrings.timezone)\n    } else {\n      // get offset accurate to hour in timezones that change offset\n      offset = new Date(timestamp + time).getTimezoneOffset()\n      offset = new Date(timestamp + time + offset * MILLISECONDS_IN_MINUTE).getTimezoneOffset()\n    }\n\n    return new Date(timestamp + time + offset * MILLISECONDS_IN_MINUTE)\n  } else {\n    return new Date(argument)\n  }\n}\n\nfunction splitDateString (dateString) {\n  var dateStrings = {}\n  var array = dateString.split(parseTokenDateTimeDelimeter)\n  var timeString\n\n  if (parseTokenPlainTime.test(array[0])) {\n    dateStrings.date = null\n    timeString = array[0]\n  } else {\n    dateStrings.date = array[0]\n    timeString = array[1]\n  }\n\n  if (timeString) {\n    var token = parseTokenTimezone.exec(timeString)\n    if (token) {\n      dateStrings.time = timeString.replace(token[1], '')\n      dateStrings.timezone = token[1]\n    } else {\n      dateStrings.time = timeString\n    }\n  }\n\n  return dateStrings\n}\n\nfunction parseYear (dateString, additionalDigits) {\n  var parseTokenYYY = parseTokensYYY[additionalDigits]\n  var parseTokenYYYYY = parseTokensYYYYY[additionalDigits]\n\n  var token\n\n  // YYYY or ±YYYYY\n  token = parseTokenYYYY.exec(dateString) || parseTokenYYYYY.exec(dateString)\n  if (token) {\n    var yearString = token[1]\n    return {\n      year: parseInt(yearString, 10),\n      restDateString: dateString.slice(yearString.length)\n    }\n  }\n\n  // YY or ±YYY\n  token = parseTokenYY.exec(dateString) || parseTokenYYY.exec(dateString)\n  if (token) {\n    var centuryString = token[1]\n    return {\n      year: parseInt(centuryString, 10) * 100,\n      restDateString: dateString.slice(centuryString.length)\n    }\n  }\n\n  // Invalid ISO-formatted year\n  return {\n    year: null\n  }\n}\n\nfunction parseDate (dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) {\n    return null\n  }\n\n  var token\n  var date\n  var month\n  var week\n\n  // YYYY\n  if (dateString.length === 0) {\n    date = new Date(0)\n    date.setUTCFullYear(year)\n    return date\n  }\n\n  // YYYY-MM\n  token = parseTokenMM.exec(dateString)\n  if (token) {\n    date = new Date(0)\n    month = parseInt(token[1], 10) - 1\n    date.setUTCFullYear(year, month)\n    return date\n  }\n\n  // YYYY-DDD or YYYYDDD\n  token = parseTokenDDD.exec(dateString)\n  if (token) {\n    date = new Date(0)\n    var dayOfYear = parseInt(token[1], 10)\n    date.setUTCFullYear(year, 0, dayOfYear)\n    return date\n  }\n\n  // YYYY-MM-DD or YYYYMMDD\n  token = parseTokenMMDD.exec(dateString)\n  if (token) {\n    date = new Date(0)\n    month = parseInt(token[1], 10) - 1\n    var day = parseInt(token[2], 10)\n    date.setUTCFullYear(year, month, day)\n    return date\n  }\n\n  // YYYY-Www or YYYYWww\n  token = parseTokenWww.exec(dateString)\n  if (token) {\n    week = parseInt(token[1], 10) - 1\n    return dayOfISOYear(year, week)\n  }\n\n  // YYYY-Www-D or YYYYWwwD\n  token = parseTokenWwwD.exec(dateString)\n  if (token) {\n    week = parseInt(token[1], 10) - 1\n    var dayOfWeek = parseInt(token[2], 10) - 1\n    return dayOfISOYear(year, week, dayOfWeek)\n  }\n\n  // Invalid ISO-formatted date\n  return null\n}\n\nfunction parseTime (timeString) {\n  var token\n  var hours\n  var minutes\n\n  // hh\n  token = parseTokenHH.exec(timeString)\n  if (token) {\n    hours = parseFloat(token[1].replace(',', '.'))\n    return (hours % 24) * MILLISECONDS_IN_HOUR\n  }\n\n  // hh:mm or hhmm\n  token = parseTokenHHMM.exec(timeString)\n  if (token) {\n    hours = parseInt(token[1], 10)\n    minutes = parseFloat(token[2].replace(',', '.'))\n    return (hours % 24) * MILLISECONDS_IN_HOUR +\n      minutes * MILLISECONDS_IN_MINUTE\n  }\n\n  // hh:mm:ss or hhmmss\n  token = parseTokenHHMMSS.exec(timeString)\n  if (token) {\n    hours = parseInt(token[1], 10)\n    minutes = parseInt(token[2], 10)\n    var seconds = parseFloat(token[3].replace(',', '.'))\n    return (hours % 24) * MILLISECONDS_IN_HOUR +\n      minutes * MILLISECONDS_IN_MINUTE +\n      seconds * 1000\n  }\n\n  // Invalid ISO-formatted time\n  return null\n}\n\nfunction parseTimezone (timezoneString) {\n  var token\n  var absoluteOffset\n\n  // Z\n  token = parseTokenTimezoneZ.exec(timezoneString)\n  if (token) {\n    return 0\n  }\n\n  // ±hh\n  token = parseTokenTimezoneHH.exec(timezoneString)\n  if (token) {\n    absoluteOffset = parseInt(token[2], 10) * 60\n    return (token[1] === '+') ? -absoluteOffset : absoluteOffset\n  }\n\n  // ±hh:mm or ±hhmm\n  token = parseTokenTimezoneHHMM.exec(timezoneString)\n  if (token) {\n    absoluteOffset = parseInt(token[2], 10) * 60 + parseInt(token[3], 10)\n    return (token[1] === '+') ? -absoluteOffset : absoluteOffset\n  }\n\n  return 0\n}\n\nfunction dayOfISOYear (isoYear, week, day) {\n  week = week || 0\n  day = day || 0\n  var date = new Date(0)\n  date.setUTCFullYear(isoYear, 0, 4)\n  var fourthOfJanuaryDay = date.getUTCDay() || 7\n  var diff = week * 7 + day + 1 - fourthOfJanuaryDay\n  date.setUTCDate(date.getUTCDate() + diff)\n  return date\n}\n\nmodule.exports = parse\n\n\n/***/ }),\n\n/***/ 264:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar startOfWeek = __webpack_require__(266)\n\n/**\n * @category ISO Week Helpers\n * @summary Return the start of an ISO week for the given date.\n *\n * @description\n * Return the start of an ISO week for the given date.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param {Date|String|Number} date - the original date\n * @returns {Date} the start of an ISO week\n *\n * @example\n * // The start of an ISO week for 2 September 2014 11:55:00:\n * var result = startOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\nfunction startOfISOWeek (dirtyDate) {\n  return startOfWeek(dirtyDate, {weekStartsOn: 1})\n}\n\nmodule.exports = startOfISOWeek\n\n\n/***/ }),\n\n/***/ 265:\n/***/ (function(module, exports) {\n\n/**\n * @category Common Helpers\n * @summary Is the given argument an instance of Date?\n *\n * @description\n * Is the given argument an instance of Date?\n *\n * @param {*} argument - the argument to check\n * @returns {Boolean} the given argument is an instance of Date\n *\n * @example\n * // Is 'mayonnaise' a Date?\n * var result = isDate('mayonnaise')\n * //=> false\n */\nfunction isDate (argument) {\n  return argument instanceof Date\n}\n\nmodule.exports = isDate\n\n\n/***/ }),\n\n/***/ 266:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar parse = __webpack_require__(225)\n\n/**\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|String|Number} date - the original date\n * @param {Object} [options] - the object with options\n * @param {Number} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date} the start of a week\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * var result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * var result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), {weekStartsOn: 1})\n * //=> Mon Sep 01 2014 00:00:00\n */\nfunction startOfWeek (dirtyDate, dirtyOptions) {\n  var weekStartsOn = dirtyOptions ? (Number(dirtyOptions.weekStartsOn) || 0) : 0\n\n  var date = parse(dirtyDate)\n  var day = date.getDay()\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn\n\n  date.setDate(date.getDate() - diff)\n  date.setHours(0, 0, 0, 0)\n  return date\n}\n\nmodule.exports = startOfWeek\n\n\n/***/ }),\n\n/***/ 267:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar parse = __webpack_require__(225)\n\n/**\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|String|Number} date - the original date\n * @returns {Date} the start of a day\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * var result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\nfunction startOfDay (dirtyDate) {\n  var date = parse(dirtyDate)\n  date.setHours(0, 0, 0, 0)\n  return date\n}\n\nmodule.exports = startOfDay\n\n\n/***/ }),\n\n/***/ 268:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar parse = __webpack_require__(225)\nvar startOfISOWeek = __webpack_require__(264)\n\n/**\n * @category ISO Week-Numbering Year Helpers\n * @summary Get the ISO week-numbering year of the given date.\n *\n * @description\n * Get the ISO week-numbering year of the given date,\n * which always starts 3 days before the year's first Thursday.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param {Date|String|Number} date - the given date\n * @returns {Number} the ISO week-numbering year\n *\n * @example\n * // Which ISO-week numbering year is 2 January 2005?\n * var result = getISOYear(new Date(2005, 0, 2))\n * //=> 2004\n */\nfunction getISOYear (dirtyDate) {\n  var date = parse(dirtyDate)\n  var year = date.getFullYear()\n\n  var fourthOfJanuaryOfNextYear = new Date(0)\n  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4)\n  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0)\n  var startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear)\n\n  var fourthOfJanuaryOfThisYear = new Date(0)\n  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4)\n  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0)\n  var startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear)\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year\n  } else {\n    return year - 1\n  }\n}\n\nmodule.exports = getISOYear\n\n\n/***/ }),\n\n/***/ 271:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar addDays = __webpack_require__(272)\n\n/**\n * @category Week Helpers\n * @summary Add the specified number of weeks to the given date.\n *\n * @description\n * Add the specified number of week to the given date.\n *\n * @param {Date|String|Number} date - the date to be changed\n * @param {Number} amount - the amount of weeks to be added\n * @returns {Date} the new date with the weeks added\n *\n * @example\n * // Add 4 weeks to 1 September 2014:\n * var result = addWeeks(new Date(2014, 8, 1), 4)\n * //=> Mon Sep 29 2014 00:00:00\n */\nfunction addWeeks (dirtyDate, dirtyAmount) {\n  var amount = Number(dirtyAmount)\n  var days = amount * 7\n  return addDays(dirtyDate, days)\n}\n\nmodule.exports = addWeeks\n\n\n/***/ }),\n\n/***/ 272:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar parse = __webpack_require__(225)\n\n/**\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * @param {Date|String|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be added\n * @returns {Date} the new date with the days added\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * var result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\nfunction addDays (dirtyDate, dirtyAmount) {\n  var date = parse(dirtyDate)\n  var amount = Number(dirtyAmount)\n  date.setDate(date.getDate() + amount)\n  return date\n}\n\nmodule.exports = addDays\n\n\n/***/ }),\n\n/***/ 273:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar parse = __webpack_require__(225)\n\n/**\n * @category Week Helpers\n * @summary Return the end of a week for the given date.\n *\n * @description\n * Return the end of a week for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|String|Number} date - the original date\n * @param {Object} [options] - the object with options\n * @param {Number} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date} the end of a week\n *\n * @example\n * // The end of a week for 2 September 2014 11:55:00:\n * var result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sat Sep 06 2014 23:59:59.999\n *\n * @example\n * // If the week starts on Monday, the end of the week for 2 September 2014 11:55:00:\n * var result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0), {weekStartsOn: 1})\n * //=> Sun Sep 07 2014 23:59:59.999\n */\nfunction endOfWeek (dirtyDate, dirtyOptions) {\n  var weekStartsOn = dirtyOptions ? (Number(dirtyOptions.weekStartsOn) || 0) : 0\n\n  var date = parse(dirtyDate)\n  var day = date.getDay()\n  var diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn)\n\n  date.setDate(date.getDate() + diff)\n  date.setHours(23, 59, 59, 999)\n  return date\n}\n\nmodule.exports = endOfWeek\n\n\n/***/ }),\n\n/***/ 274:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar parse = __webpack_require__(225)\n\n/**\n * @category Day Helpers\n * @summary Return the array of dates within the specified range.\n *\n * @description\n * Return the array of dates within the specified range.\n *\n * @param {Date|String|Number} startDate - the first date\n * @param {Date|String|Number} endDate - the last date\n * @returns {Date[]} the array with starts of days from the day of startDate to the day of endDate\n * @throws {Error} startDate cannot be after endDate\n *\n * @example\n * // Each day between 6 October 2014 and 10 October 2014:\n * var result = eachDay(\n *   new Date(2014, 9, 6),\n *   new Date(2014, 9, 10)\n * )\n * //=> [\n * //   Mon Oct 06 2014 00:00:00,\n * //   Tue Oct 07 2014 00:00:00,\n * //   Wed Oct 08 2014 00:00:00,\n * //   Thu Oct 09 2014 00:00:00,\n * //   Fri Oct 10 2014 00:00:00\n * // ]\n */\nfunction eachDay (dirtyStartDate, dirtyEndDate) {\n  var startDate = parse(dirtyStartDate)\n  var endDate = parse(dirtyEndDate)\n\n  var endTime = endDate.getTime()\n\n  if (startDate.getTime() > endTime) {\n    throw new Error('The first date cannot be after the second date')\n  }\n\n  var dates = []\n\n  var currentDate = startDate\n  currentDate.setHours(0, 0, 0, 0)\n\n  while (currentDate.getTime() <= endTime) {\n    dates.push(parse(currentDate))\n    currentDate.setDate(currentDate.getDate() + 1)\n  }\n\n  return dates\n}\n\nmodule.exports = eachDay\n\n\n/***/ }),\n\n/***/ 275:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_styled_components__ = __webpack_require__(91);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_date_fns_format__ = __webpack_require__(276);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_date_fns_format___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_date_fns_format__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_date_fns_is_past__ = __webpack_require__(287);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_date_fns_is_past___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_date_fns_is_past__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_date_fns_is_today__ = __webpack_require__(288);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_date_fns_is_today___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_date_fns_is_today__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_date_fns_is_first_day_of_month__ = __webpack_require__(289);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_date_fns_is_first_day_of_month___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_date_fns_is_first_day_of_month__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_date_fns_get_month__ = __webpack_require__(290);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_date_fns_get_month___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_date_fns_get_month__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__TrackableLink__ = __webpack_require__(92);\nvar _templateObject=_taggedTemplateLiteral(['\\n  display: flex;\\n  flex-wrap: wrap;\\n  width: 100%;\\n  border-bottom: 1px solid #eaeaea;\\n'],['\\n  display: flex;\\n  flex-wrap: wrap;\\n  width: 100%;\\n  border-bottom: 1px solid #eaeaea;\\n']),_templateObject2=_taggedTemplateLiteral(['\\n  width: calc(100% / 7);\\n  font-weight: 400;\\n  margin-bottom: 0.8rem;\\n'],['\\n  width: calc(100% / 7);\\n  font-weight: 400;\\n  margin-bottom: 0.8rem;\\n']),_templateObject3=_taggedTemplateLiteral(['\\n  height: 6rem;\\n  width: calc(100% / 7);\\n  box-sizing: border-box;\\n  border-top: 1px solid #eaeaea;\\n  border-left: 1px solid #eaeaea;\\n  padding: 0.4rem 0.4rem 0.2rem 0.4rem;\\n  display: flex;\\n  justify-content: space-between;\\n  \\n  ','\\n  ','\\n  \\n  &:nth-child(7n) {\\n    border-right: 1px solid #eaeaea;\\n  }\\n'],['\\n  height: 6rem;\\n  width: calc(100% / 7);\\n  box-sizing: border-box;\\n  border-top: 1px solid #eaeaea;\\n  border-left: 1px solid #eaeaea;\\n  padding: 0.4rem 0.4rem 0.2rem 0.4rem;\\n  display: flex;\\n  justify-content: space-between;\\n  \\n  ','\\n  ','\\n  \\n  &:nth-child(7n) {\\n    border-right: 1px solid #eaeaea;\\n  }\\n']),_templateObject4=_taggedTemplateLiteral(['\\n  align-self: flex-end;\\n  font-size: 1.2rem;\\n'],['\\n  align-self: flex-end;\\n  font-size: 1.2rem;\\n']),_templateObject5=_taggedTemplateLiteral(['\\n'],['\\n']);function _taggedTemplateLiteral(strings,raw){return Object.freeze(Object.defineProperties(strings,{raw:{value:Object.freeze(raw)}}));}var DAYS=['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];var MONTHS=['January','February','March','April','May','June','July','August','September','October','November','December'];var Container=__WEBPACK_IMPORTED_MODULE_1_styled_components__[\"a\" /* default */].div(_templateObject);var WeekDay=__WEBPACK_IMPORTED_MODULE_1_styled_components__[\"a\" /* default */].div(_templateObject2);var Day=__WEBPACK_IMPORTED_MODULE_1_styled_components__[\"a\" /* default */].div(_templateObject3,function(props){return!!props.isPast&&'opacity: 0.25;';},function(props){return!!props.isToday&&'opacity: 1; font-weight: 400; color: red;';});var DateLabel=__WEBPACK_IMPORTED_MODULE_1_styled_components__[\"a\" /* default */].div(_templateObject4);var EventIcons=__WEBPACK_IMPORTED_MODULE_1_styled_components__[\"a\" /* default */].div(_templateObject5);var Calendar=function Calendar(_ref){var dateRange=_ref.dateRange,events=_ref.events;var renderWeekDay=function renderWeekDay(day){return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(WeekDay,{key:day},day);};var renderEvents=function renderEvents(date){return events.filter(function(e){return __WEBPACK_IMPORTED_MODULE_2_date_fns_format___default()(date,'YYYY-MM-DD')===e.fields.date;}).map(function(event){var _event$fields$communi=event.fields.community.fields,badge=_event$fields$communi.badge,communityName=_event$fields$communi.communityName;return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_7__TrackableLink__[\"a\" /* default */],{href:event.fields.url,target:'_blank',key:event.fields.url},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('img',{src:badge.fields.file.url,alt:communityName,width:40,height:40}));});};var renderDay=function renderDay(date,index){return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(Day,{key:index,isToday:__WEBPACK_IMPORTED_MODULE_4_date_fns_is_today___default()(date),isPast:__WEBPACK_IMPORTED_MODULE_3_date_fns_is_past___default()(date)},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(EventIcons,null,renderEvents(date)),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(DateLabel,null,__WEBPACK_IMPORTED_MODULE_5_date_fns_is_first_day_of_month___default()(date)&&MONTHS[__WEBPACK_IMPORTED_MODULE_6_date_fns_get_month___default()(date)],'\\xA0',date.getDate()));};return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(Container,null,DAYS.map(renderWeekDay),dateRange.map(renderDay));};/* harmony default export */ __webpack_exports__[\"a\"] = (Calendar);\n\n/***/ }),\n\n/***/ 276:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar getDayOfYear = __webpack_require__(277)\nvar getISOWeek = __webpack_require__(280)\nvar getISOYear = __webpack_require__(268)\nvar parse = __webpack_require__(225)\nvar isValid = __webpack_require__(282)\nvar enLocale = __webpack_require__(283)\n\n/**\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format.\n *\n * Accepted tokens:\n * | Unit                    | Token | Result examples                  |\n * |-------------------------|-------|----------------------------------|\n * | Month                   | M     | 1, 2, ..., 12                    |\n * |                         | Mo    | 1st, 2nd, ..., 12th              |\n * |                         | MM    | 01, 02, ..., 12                  |\n * |                         | MMM   | Jan, Feb, ..., Dec               |\n * |                         | MMMM  | January, February, ..., December |\n * | Quarter                 | Q     | 1, 2, 3, 4                       |\n * |                         | Qo    | 1st, 2nd, 3rd, 4th               |\n * | Day of month            | D     | 1, 2, ..., 31                    |\n * |                         | Do    | 1st, 2nd, ..., 31st              |\n * |                         | DD    | 01, 02, ..., 31                  |\n * | Day of year             | DDD   | 1, 2, ..., 366                   |\n * |                         | DDDo  | 1st, 2nd, ..., 366th             |\n * |                         | DDDD  | 001, 002, ..., 366               |\n * | Day of week             | d     | 0, 1, ..., 6                     |\n * |                         | do    | 0th, 1st, ..., 6th               |\n * |                         | dd    | Su, Mo, ..., Sa                  |\n * |                         | ddd   | Sun, Mon, ..., Sat               |\n * |                         | dddd  | Sunday, Monday, ..., Saturday    |\n * | Day of ISO week         | E     | 1, 2, ..., 7                     |\n * | ISO week                | W     | 1, 2, ..., 53                    |\n * |                         | Wo    | 1st, 2nd, ..., 53rd              |\n * |                         | WW    | 01, 02, ..., 53                  |\n * | Year                    | YY    | 00, 01, ..., 99                  |\n * |                         | YYYY  | 1900, 1901, ..., 2099            |\n * | ISO week-numbering year | GG    | 00, 01, ..., 99                  |\n * |                         | GGGG  | 1900, 1901, ..., 2099            |\n * | AM/PM                   | A     | AM, PM                           |\n * |                         | a     | am, pm                           |\n * |                         | aa    | a.m., p.m.                       |\n * | Hour                    | H     | 0, 1, ... 23                     |\n * |                         | HH    | 00, 01, ... 23                   |\n * |                         | h     | 1, 2, ..., 12                    |\n * |                         | hh    | 01, 02, ..., 12                  |\n * | Minute                  | m     | 0, 1, ..., 59                    |\n * |                         | mm    | 00, 01, ..., 59                  |\n * | Second                  | s     | 0, 1, ..., 59                    |\n * |                         | ss    | 00, 01, ..., 59                  |\n * | 1/10 of second          | S     | 0, 1, ..., 9                     |\n * | 1/100 of second         | SS    | 00, 01, ..., 99                  |\n * | Millisecond             | SSS   | 000, 001, ..., 999               |\n * | Timezone                | Z     | -01:00, +00:00, ... +12:00       |\n * |                         | ZZ    | -0100, +0000, ..., +1200         |\n * | Seconds timestamp       | X     | 512969520                        |\n * | Milliseconds timestamp  | x     | 512969520900                     |\n *\n * The characters wrapped in square brackets are escaped.\n *\n * The result may vary by locale.\n *\n * @param {Date|String|Number} date - the original date\n * @param {String} [format='YYYY-MM-DDTHH:mm:ss.SSSZ'] - the string of tokens\n * @param {Object} [options] - the object with options\n * @param {Object} [options.locale=enLocale] - the locale object\n * @returns {String} the formatted date string\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * var result = format(\n *   new Date(2014, 1, 11),\n *   'MM/DD/YYYY'\n * )\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * var eoLocale = require('date-fns/locale/eo')\n * var result = format(\n *   new Date(2014, 6, 2),\n *   'Do [de] MMMM YYYY',\n *   {locale: eoLocale}\n * )\n * //=> '2-a de julio 2014'\n */\nfunction format (dirtyDate, dirtyFormatStr, dirtyOptions) {\n  var formatStr = dirtyFormatStr ? String(dirtyFormatStr) : 'YYYY-MM-DDTHH:mm:ss.SSSZ'\n  var options = dirtyOptions || {}\n\n  var locale = options.locale\n  var localeFormatters = enLocale.format.formatters\n  var formattingTokensRegExp = enLocale.format.formattingTokensRegExp\n  if (locale && locale.format && locale.format.formatters) {\n    localeFormatters = locale.format.formatters\n\n    if (locale.format.formattingTokensRegExp) {\n      formattingTokensRegExp = locale.format.formattingTokensRegExp\n    }\n  }\n\n  var date = parse(dirtyDate)\n\n  if (!isValid(date)) {\n    return 'Invalid Date'\n  }\n\n  var formatFn = buildFormatFn(formatStr, localeFormatters, formattingTokensRegExp)\n\n  return formatFn(date)\n}\n\nvar formatters = {\n  // Month: 1, 2, ..., 12\n  'M': function (date) {\n    return date.getMonth() + 1\n  },\n\n  // Month: 01, 02, ..., 12\n  'MM': function (date) {\n    return addLeadingZeros(date.getMonth() + 1, 2)\n  },\n\n  // Quarter: 1, 2, 3, 4\n  'Q': function (date) {\n    return Math.ceil((date.getMonth() + 1) / 3)\n  },\n\n  // Day of month: 1, 2, ..., 31\n  'D': function (date) {\n    return date.getDate()\n  },\n\n  // Day of month: 01, 02, ..., 31\n  'DD': function (date) {\n    return addLeadingZeros(date.getDate(), 2)\n  },\n\n  // Day of year: 1, 2, ..., 366\n  'DDD': function (date) {\n    return getDayOfYear(date)\n  },\n\n  // Day of year: 001, 002, ..., 366\n  'DDDD': function (date) {\n    return addLeadingZeros(getDayOfYear(date), 3)\n  },\n\n  // Day of week: 0, 1, ..., 6\n  'd': function (date) {\n    return date.getDay()\n  },\n\n  // Day of ISO week: 1, 2, ..., 7\n  'E': function (date) {\n    return date.getDay() || 7\n  },\n\n  // ISO week: 1, 2, ..., 53\n  'W': function (date) {\n    return getISOWeek(date)\n  },\n\n  // ISO week: 01, 02, ..., 53\n  'WW': function (date) {\n    return addLeadingZeros(getISOWeek(date), 2)\n  },\n\n  // Year: 00, 01, ..., 99\n  'YY': function (date) {\n    return addLeadingZeros(date.getFullYear(), 4).substr(2)\n  },\n\n  // Year: 1900, 1901, ..., 2099\n  'YYYY': function (date) {\n    return addLeadingZeros(date.getFullYear(), 4)\n  },\n\n  // ISO week-numbering year: 00, 01, ..., 99\n  'GG': function (date) {\n    return String(getISOYear(date)).substr(2)\n  },\n\n  // ISO week-numbering year: 1900, 1901, ..., 2099\n  'GGGG': function (date) {\n    return getISOYear(date)\n  },\n\n  // Hour: 0, 1, ... 23\n  'H': function (date) {\n    return date.getHours()\n  },\n\n  // Hour: 00, 01, ..., 23\n  'HH': function (date) {\n    return addLeadingZeros(date.getHours(), 2)\n  },\n\n  // Hour: 1, 2, ..., 12\n  'h': function (date) {\n    var hours = date.getHours()\n    if (hours === 0) {\n      return 12\n    } else if (hours > 12) {\n      return hours % 12\n    } else {\n      return hours\n    }\n  },\n\n  // Hour: 01, 02, ..., 12\n  'hh': function (date) {\n    return addLeadingZeros(formatters['h'](date), 2)\n  },\n\n  // Minute: 0, 1, ..., 59\n  'm': function (date) {\n    return date.getMinutes()\n  },\n\n  // Minute: 00, 01, ..., 59\n  'mm': function (date) {\n    return addLeadingZeros(date.getMinutes(), 2)\n  },\n\n  // Second: 0, 1, ..., 59\n  's': function (date) {\n    return date.getSeconds()\n  },\n\n  // Second: 00, 01, ..., 59\n  'ss': function (date) {\n    return addLeadingZeros(date.getSeconds(), 2)\n  },\n\n  // 1/10 of second: 0, 1, ..., 9\n  'S': function (date) {\n    return Math.floor(date.getMilliseconds() / 100)\n  },\n\n  // 1/100 of second: 00, 01, ..., 99\n  'SS': function (date) {\n    return addLeadingZeros(Math.floor(date.getMilliseconds() / 10), 2)\n  },\n\n  // Millisecond: 000, 001, ..., 999\n  'SSS': function (date) {\n    return addLeadingZeros(date.getMilliseconds(), 3)\n  },\n\n  // Timezone: -01:00, +00:00, ... +12:00\n  'Z': function (date) {\n    return formatTimezone(date.getTimezoneOffset(), ':')\n  },\n\n  // Timezone: -0100, +0000, ... +1200\n  'ZZ': function (date) {\n    return formatTimezone(date.getTimezoneOffset())\n  },\n\n  // Seconds timestamp: 512969520\n  'X': function (date) {\n    return Math.floor(date.getTime() / 1000)\n  },\n\n  // Milliseconds timestamp: 512969520900\n  'x': function (date) {\n    return date.getTime()\n  }\n}\n\nfunction buildFormatFn (formatStr, localeFormatters, formattingTokensRegExp) {\n  var array = formatStr.match(formattingTokensRegExp)\n  var length = array.length\n\n  var i\n  var formatter\n  for (i = 0; i < length; i++) {\n    formatter = localeFormatters[array[i]] || formatters[array[i]]\n    if (formatter) {\n      array[i] = formatter\n    } else {\n      array[i] = removeFormattingTokens(array[i])\n    }\n  }\n\n  return function (date) {\n    var output = ''\n    for (var i = 0; i < length; i++) {\n      if (array[i] instanceof Function) {\n        output += array[i](date, formatters)\n      } else {\n        output += array[i]\n      }\n    }\n    return output\n  }\n}\n\nfunction removeFormattingTokens (input) {\n  if (input.match(/\\[[\\s\\S]/)) {\n    return input.replace(/^\\[|]$/g, '')\n  }\n  return input.replace(/\\\\/g, '')\n}\n\nfunction formatTimezone (offset, delimeter) {\n  delimeter = delimeter || ''\n  var sign = offset > 0 ? '-' : '+'\n  var absOffset = Math.abs(offset)\n  var hours = Math.floor(absOffset / 60)\n  var minutes = absOffset % 60\n  return sign + addLeadingZeros(hours, 2) + delimeter + addLeadingZeros(minutes, 2)\n}\n\nfunction addLeadingZeros (number, targetLength) {\n  var output = Math.abs(number).toString()\n  while (output.length < targetLength) {\n    output = '0' + output\n  }\n  return output\n}\n\nmodule.exports = format\n\n\n/***/ }),\n\n/***/ 277:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar parse = __webpack_require__(225)\nvar startOfYear = __webpack_require__(278)\nvar differenceInCalendarDays = __webpack_require__(279)\n\n/**\n * @category Day Helpers\n * @summary Get the day of the year of the given date.\n *\n * @description\n * Get the day of the year of the given date.\n *\n * @param {Date|String|Number} date - the given date\n * @returns {Number} the day of year\n *\n * @example\n * // Which day of the year is 2 July 2014?\n * var result = getDayOfYear(new Date(2014, 6, 2))\n * //=> 183\n */\nfunction getDayOfYear (dirtyDate) {\n  var date = parse(dirtyDate)\n  var diff = differenceInCalendarDays(date, startOfYear(date))\n  var dayOfYear = diff + 1\n  return dayOfYear\n}\n\nmodule.exports = getDayOfYear\n\n\n/***/ }),\n\n/***/ 278:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar parse = __webpack_require__(225)\n\n/**\n * @category Year Helpers\n * @summary Return the start of a year for the given date.\n *\n * @description\n * Return the start of a year for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|String|Number} date - the original date\n * @returns {Date} the start of a year\n *\n * @example\n * // The start of a year for 2 September 2014 11:55:00:\n * var result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Jan 01 2014 00:00:00\n */\nfunction startOfYear (dirtyDate) {\n  var cleanDate = parse(dirtyDate)\n  var date = new Date(0)\n  date.setFullYear(cleanDate.getFullYear(), 0, 1)\n  date.setHours(0, 0, 0, 0)\n  return date\n}\n\nmodule.exports = startOfYear\n\n\n/***/ }),\n\n/***/ 279:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar startOfDay = __webpack_require__(267)\n\nvar MILLISECONDS_IN_MINUTE = 60000\nvar MILLISECONDS_IN_DAY = 86400000\n\n/**\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates.\n *\n * @param {Date|String|Number} dateLeft - the later date\n * @param {Date|String|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar days\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * var result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n */\nfunction differenceInCalendarDays (dirtyDateLeft, dirtyDateRight) {\n  var startOfDayLeft = startOfDay(dirtyDateLeft)\n  var startOfDayRight = startOfDay(dirtyDateRight)\n\n  var timestampLeft = startOfDayLeft.getTime() -\n    startOfDayLeft.getTimezoneOffset() * MILLISECONDS_IN_MINUTE\n  var timestampRight = startOfDayRight.getTime() -\n    startOfDayRight.getTimezoneOffset() * MILLISECONDS_IN_MINUTE\n\n  // Round the number of days to the nearest integer\n  // because the number of milliseconds in a day is not constant\n  // (e.g. it's different in the day of the daylight saving time clock shift)\n  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY)\n}\n\nmodule.exports = differenceInCalendarDays\n\n\n/***/ }),\n\n/***/ 280:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar parse = __webpack_require__(225)\nvar startOfISOWeek = __webpack_require__(264)\nvar startOfISOYear = __webpack_require__(281)\n\nvar MILLISECONDS_IN_WEEK = 604800000\n\n/**\n * @category ISO Week Helpers\n * @summary Get the ISO week of the given date.\n *\n * @description\n * Get the ISO week of the given date.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param {Date|String|Number} date - the given date\n * @returns {Number} the ISO week\n *\n * @example\n * // Which week of the ISO-week numbering year is 2 January 2005?\n * var result = getISOWeek(new Date(2005, 0, 2))\n * //=> 53\n */\nfunction getISOWeek (dirtyDate) {\n  var date = parse(dirtyDate)\n  var diff = startOfISOWeek(date).getTime() - startOfISOYear(date).getTime()\n\n  // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1\n}\n\nmodule.exports = getISOWeek\n\n\n/***/ }),\n\n/***/ 281:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar getISOYear = __webpack_require__(268)\nvar startOfISOWeek = __webpack_require__(264)\n\n/**\n * @category ISO Week-Numbering Year Helpers\n * @summary Return the start of an ISO week-numbering year for the given date.\n *\n * @description\n * Return the start of an ISO week-numbering year,\n * which always starts 3 days before the year's first Thursday.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param {Date|String|Number} date - the original date\n * @returns {Date} the start of an ISO year\n *\n * @example\n * // The start of an ISO week-numbering year for 2 July 2005:\n * var result = startOfISOYear(new Date(2005, 6, 2))\n * //=> Mon Jan 03 2005 00:00:00\n */\nfunction startOfISOYear (dirtyDate) {\n  var year = getISOYear(dirtyDate)\n  var fourthOfJanuary = new Date(0)\n  fourthOfJanuary.setFullYear(year, 0, 4)\n  fourthOfJanuary.setHours(0, 0, 0, 0)\n  var date = startOfISOWeek(fourthOfJanuary)\n  return date\n}\n\nmodule.exports = startOfISOYear\n\n\n/***/ }),\n\n/***/ 282:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar isDate = __webpack_require__(265)\n\n/**\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @param {Date} date - the date to check\n * @returns {Boolean} the date is valid\n * @throws {TypeError} argument must be an instance of Date\n *\n * @example\n * // For the valid date:\n * var result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the invalid date:\n * var result = isValid(new Date(''))\n * //=> false\n */\nfunction isValid (dirtyDate) {\n  if (isDate(dirtyDate)) {\n    return !isNaN(dirtyDate)\n  } else {\n    throw new TypeError(toString.call(dirtyDate) + ' is not an instance of Date')\n  }\n}\n\nmodule.exports = isValid\n\n\n/***/ }),\n\n/***/ 283:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar buildDistanceInWordsLocale = __webpack_require__(284)\nvar buildFormatLocale = __webpack_require__(285)\n\n/**\n * @category Locales\n * @summary English locale.\n */\nmodule.exports = {\n  distanceInWords: buildDistanceInWordsLocale(),\n  format: buildFormatLocale()\n}\n\n\n/***/ }),\n\n/***/ 284:\n/***/ (function(module, exports) {\n\nfunction buildDistanceInWordsLocale () {\n  var distanceInWordsLocale = {\n    lessThanXSeconds: {\n      one: 'less than a second',\n      other: 'less than {{count}} seconds'\n    },\n\n    xSeconds: {\n      one: '1 second',\n      other: '{{count}} seconds'\n    },\n\n    halfAMinute: 'half a minute',\n\n    lessThanXMinutes: {\n      one: 'less than a minute',\n      other: 'less than {{count}} minutes'\n    },\n\n    xMinutes: {\n      one: '1 minute',\n      other: '{{count}} minutes'\n    },\n\n    aboutXHours: {\n      one: 'about 1 hour',\n      other: 'about {{count}} hours'\n    },\n\n    xHours: {\n      one: '1 hour',\n      other: '{{count}} hours'\n    },\n\n    xDays: {\n      one: '1 day',\n      other: '{{count}} days'\n    },\n\n    aboutXMonths: {\n      one: 'about 1 month',\n      other: 'about {{count}} months'\n    },\n\n    xMonths: {\n      one: '1 month',\n      other: '{{count}} months'\n    },\n\n    aboutXYears: {\n      one: 'about 1 year',\n      other: 'about {{count}} years'\n    },\n\n    xYears: {\n      one: '1 year',\n      other: '{{count}} years'\n    },\n\n    overXYears: {\n      one: 'over 1 year',\n      other: 'over {{count}} years'\n    },\n\n    almostXYears: {\n      one: 'almost 1 year',\n      other: 'almost {{count}} years'\n    }\n  }\n\n  function localize (token, count, options) {\n    options = options || {}\n\n    var result\n    if (typeof distanceInWordsLocale[token] === 'string') {\n      result = distanceInWordsLocale[token]\n    } else if (count === 1) {\n      result = distanceInWordsLocale[token].one\n    } else {\n      result = distanceInWordsLocale[token].other.replace('{{count}}', count)\n    }\n\n    if (options.addSuffix) {\n      if (options.comparison > 0) {\n        return 'in ' + result\n      } else {\n        return result + ' ago'\n      }\n    }\n\n    return result\n  }\n\n  return {\n    localize: localize\n  }\n}\n\nmodule.exports = buildDistanceInWordsLocale\n\n\n/***/ }),\n\n/***/ 285:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar buildFormattingTokensRegExp = __webpack_require__(286)\n\nfunction buildFormatLocale () {\n  // Note: in English, the names of days of the week and months are capitalized.\n  // If you are making a new locale based on this one, check if the same is true for the language you're working on.\n  // Generally, formatted dates should look like they are in the middle of a sentence,\n  // e.g. in Spanish language the weekdays and months should be in the lowercase.\n  var months3char = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n  var monthsFull = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n  var weekdays2char = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa']\n  var weekdays3char = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\n  var weekdaysFull = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n  var meridiemUppercase = ['AM', 'PM']\n  var meridiemLowercase = ['am', 'pm']\n  var meridiemFull = ['a.m.', 'p.m.']\n\n  var formatters = {\n    // Month: Jan, Feb, ..., Dec\n    'MMM': function (date) {\n      return months3char[date.getMonth()]\n    },\n\n    // Month: January, February, ..., December\n    'MMMM': function (date) {\n      return monthsFull[date.getMonth()]\n    },\n\n    // Day of week: Su, Mo, ..., Sa\n    'dd': function (date) {\n      return weekdays2char[date.getDay()]\n    },\n\n    // Day of week: Sun, Mon, ..., Sat\n    'ddd': function (date) {\n      return weekdays3char[date.getDay()]\n    },\n\n    // Day of week: Sunday, Monday, ..., Saturday\n    'dddd': function (date) {\n      return weekdaysFull[date.getDay()]\n    },\n\n    // AM, PM\n    'A': function (date) {\n      return (date.getHours() / 12) >= 1 ? meridiemUppercase[1] : meridiemUppercase[0]\n    },\n\n    // am, pm\n    'a': function (date) {\n      return (date.getHours() / 12) >= 1 ? meridiemLowercase[1] : meridiemLowercase[0]\n    },\n\n    // a.m., p.m.\n    'aa': function (date) {\n      return (date.getHours() / 12) >= 1 ? meridiemFull[1] : meridiemFull[0]\n    }\n  }\n\n  // Generate ordinal version of formatters: M -> Mo, D -> Do, etc.\n  var ordinalFormatters = ['M', 'D', 'DDD', 'd', 'Q', 'W']\n  ordinalFormatters.forEach(function (formatterToken) {\n    formatters[formatterToken + 'o'] = function (date, formatters) {\n      return ordinal(formatters[formatterToken](date))\n    }\n  })\n\n  return {\n    formatters: formatters,\n    formattingTokensRegExp: buildFormattingTokensRegExp(formatters)\n  }\n}\n\nfunction ordinal (number) {\n  var rem100 = number % 100\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + 'st'\n      case 2:\n        return number + 'nd'\n      case 3:\n        return number + 'rd'\n    }\n  }\n  return number + 'th'\n}\n\nmodule.exports = buildFormatLocale\n\n\n/***/ }),\n\n/***/ 286:\n/***/ (function(module, exports) {\n\nvar commonFormatterKeys = [\n  'M', 'MM', 'Q', 'D', 'DD', 'DDD', 'DDDD', 'd',\n  'E', 'W', 'WW', 'YY', 'YYYY', 'GG', 'GGGG',\n  'H', 'HH', 'h', 'hh', 'm', 'mm',\n  's', 'ss', 'S', 'SS', 'SSS',\n  'Z', 'ZZ', 'X', 'x'\n]\n\nfunction buildFormattingTokensRegExp (formatters) {\n  var formatterKeys = []\n  for (var key in formatters) {\n    if (formatters.hasOwnProperty(key)) {\n      formatterKeys.push(key)\n    }\n  }\n\n  var formattingTokens = commonFormatterKeys\n    .concat(formatterKeys)\n    .sort()\n    .reverse()\n  var formattingTokensRegExp = new RegExp(\n    '(\\\\[[^\\\\[]*\\\\])|(\\\\\\\\)?' + '(' + formattingTokens.join('|') + '|.)', 'g'\n  )\n\n  return formattingTokensRegExp\n}\n\nmodule.exports = buildFormattingTokensRegExp\n\n\n/***/ }),\n\n/***/ 287:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar parse = __webpack_require__(225)\n\n/**\n * @category Common Helpers\n * @summary Is the given date in the past?\n *\n * @description\n * Is the given date in the past?\n *\n * @param {Date|String|Number} date - the date to check\n * @returns {Boolean} the date is in the past\n *\n * @example\n * // If today is 6 October 2014, is 2 July 2014 in the past?\n * var result = isPast(new Date(2014, 6, 2))\n * //=> true\n */\nfunction isPast (dirtyDate) {\n  return parse(dirtyDate).getTime() < new Date().getTime()\n}\n\nmodule.exports = isPast\n\n\n/***/ }),\n\n/***/ 288:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar startOfDay = __webpack_require__(267)\n\n/**\n * @category Day Helpers\n * @summary Is the given date today?\n *\n * @description\n * Is the given date today?\n *\n * @param {Date|String|Number} date - the date to check\n * @returns {Boolean} the date is today\n *\n * @example\n * // If today is 6 October 2014, is 6 October 14:00:00 today?\n * var result = isToday(new Date(2014, 9, 6, 14, 0))\n * //=> true\n */\nfunction isToday (dirtyDate) {\n  return startOfDay(dirtyDate).getTime() === startOfDay(new Date()).getTime()\n}\n\nmodule.exports = isToday\n\n\n/***/ }),\n\n/***/ 289:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar parse = __webpack_require__(225)\n\n/**\n * @category Month Helpers\n * @summary Is the given date the first day of a month?\n *\n * @description\n * Is the given date the first day of a month?\n *\n * @param {Date|String|Number} date - the date to check\n * @returns {Boolean} the date is the first day of a month\n *\n * @example\n * // Is 1 September 2014 the first day of a month?\n * var result = isFirstDayOfMonth(new Date(2014, 8, 1))\n * //=> true\n */\nfunction isFirstDayOfMonth (dirtyDate) {\n  return parse(dirtyDate).getDate() === 1\n}\n\nmodule.exports = isFirstDayOfMonth\n\n\n/***/ }),\n\n/***/ 290:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar parse = __webpack_require__(225)\n\n/**\n * @category Month Helpers\n * @summary Get the month of the given date.\n *\n * @description\n * Get the month of the given date.\n *\n * @param {Date|String|Number} date - the given date\n * @returns {Number} the month\n *\n * @example\n * // Which month is 29 February 2012?\n * var result = getMonth(new Date(2012, 1, 29))\n * //=> 1\n */\nfunction getMonth (dirtyDate) {\n  var date = parse(dirtyDate)\n  var month = date.getMonth()\n  return month\n}\n\nmodule.exports = getMonth\n\n\n/***/ }),\n\n/***/ 291:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return getEvents; });\nvar getEvents=function getEvents(){return fetch(global.apiServiceURL+\"/api/events\").then(function(response){return response.json();});};\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(28)))\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/2.49f83fd7.chunk.js","import React from 'react';\nimport styled from 'styled-components';\n\nimport addWeeks from 'date-fns/add_weeks';\nimport startOfWeek from 'date-fns/start_of_week';\nimport endOfWeek from 'date-fns/end_of_week';\nimport eachDay from 'date-fns/each_day';\n\nimport Calendar from './Calendar';\nimport {getEvents} from '../../services/events';\n\nconst Container = styled.div`\n  flex-direction: column;\n`;\n\nclass Events extends React.Component {\n\n  \n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      loading: true,\n      events: []\n    };\n    const start = startOfWeek(new Date());\n    const end = endOfWeek(addWeeks(start, 7));\n\n    this.dateRange = eachDay(start, end);\n  }\n\n  componentDidMount() {\n    getEvents()\n      .then(items => this.setState({\n        events: items,\n        loading: false\n      }));\n\n    global.ga('set', 'page', '/events');\n    global.ga('send', 'pageview');\n  }\n\n  render() {\n    return (\n      <Container>\n        <h2>There is always something going on</h2>\n\n        <Calendar dateRange={this.dateRange} events={this.state.events}/>\n      </Container>\n    );\n  }\n}\n\nexport default Events;\n\n\n// WEBPACK FOOTER //\n// ./src/components/events/Events.js","var isDate = require('../is_date/index.js')\n\nvar MILLISECONDS_IN_HOUR = 3600000\nvar MILLISECONDS_IN_MINUTE = 60000\nvar DEFAULT_ADDITIONAL_DIGITS = 2\n\nvar parseTokenDateTimeDelimeter = /[T ]/\nvar parseTokenPlainTime = /:/\n\n// year tokens\nvar parseTokenYY = /^(\\d{2})$/\nvar parseTokensYYY = [\n  /^([+-]\\d{2})$/, // 0 additional digits\n  /^([+-]\\d{3})$/, // 1 additional digit\n  /^([+-]\\d{4})$/ // 2 additional digits\n]\n\nvar parseTokenYYYY = /^(\\d{4})/\nvar parseTokensYYYYY = [\n  /^([+-]\\d{4})/, // 0 additional digits\n  /^([+-]\\d{5})/, // 1 additional digit\n  /^([+-]\\d{6})/ // 2 additional digits\n]\n\n// date tokens\nvar parseTokenMM = /^-(\\d{2})$/\nvar parseTokenDDD = /^-?(\\d{3})$/\nvar parseTokenMMDD = /^-?(\\d{2})-?(\\d{2})$/\nvar parseTokenWww = /^-?W(\\d{2})$/\nvar parseTokenWwwD = /^-?W(\\d{2})-?(\\d{1})$/\n\n// time tokens\nvar parseTokenHH = /^(\\d{2}([.,]\\d*)?)$/\nvar parseTokenHHMM = /^(\\d{2}):?(\\d{2}([.,]\\d*)?)$/\nvar parseTokenHHMMSS = /^(\\d{2}):?(\\d{2}):?(\\d{2}([.,]\\d*)?)$/\n\n// timezone tokens\nvar parseTokenTimezone = /([Z+-].*)$/\nvar parseTokenTimezoneZ = /^(Z)$/\nvar parseTokenTimezoneHH = /^([+-])(\\d{2})$/\nvar parseTokenTimezoneHHMM = /^([+-])(\\d{2}):?(\\d{2})$/\n\n/**\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If an argument is a string, the function tries to parse it.\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n *\n * If all above fails, the function passes the given argument to Date constructor.\n *\n * @param {Date|String|Number} argument - the value to convert\n * @param {Object} [options] - the object with options\n * @param {0 | 1 | 2} [options.additionalDigits=2] - the additional number of digits in the extended year format\n * @returns {Date} the parsed date in the local time zone\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * var result = parse('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Parse string '+02014101',\n * // if the additional number of digits in the extended year format is 1:\n * var result = parse('+02014101', {additionalDigits: 1})\n * //=> Fri Apr 11 2014 00:00:00\n */\nfunction parse (argument, dirtyOptions) {\n  if (isDate(argument)) {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime())\n  } else if (typeof argument !== 'string') {\n    return new Date(argument)\n  }\n\n  var options = dirtyOptions || {}\n  var additionalDigits = options.additionalDigits\n  if (additionalDigits == null) {\n    additionalDigits = DEFAULT_ADDITIONAL_DIGITS\n  } else {\n    additionalDigits = Number(additionalDigits)\n  }\n\n  var dateStrings = splitDateString(argument)\n\n  var parseYearResult = parseYear(dateStrings.date, additionalDigits)\n  var year = parseYearResult.year\n  var restDateString = parseYearResult.restDateString\n\n  var date = parseDate(restDateString, year)\n\n  if (date) {\n    var timestamp = date.getTime()\n    var time = 0\n    var offset\n\n    if (dateStrings.time) {\n      time = parseTime(dateStrings.time)\n    }\n\n    if (dateStrings.timezone) {\n      offset = parseTimezone(dateStrings.timezone)\n    } else {\n      // get offset accurate to hour in timezones that change offset\n      offset = new Date(timestamp + time).getTimezoneOffset()\n      offset = new Date(timestamp + time + offset * MILLISECONDS_IN_MINUTE).getTimezoneOffset()\n    }\n\n    return new Date(timestamp + time + offset * MILLISECONDS_IN_MINUTE)\n  } else {\n    return new Date(argument)\n  }\n}\n\nfunction splitDateString (dateString) {\n  var dateStrings = {}\n  var array = dateString.split(parseTokenDateTimeDelimeter)\n  var timeString\n\n  if (parseTokenPlainTime.test(array[0])) {\n    dateStrings.date = null\n    timeString = array[0]\n  } else {\n    dateStrings.date = array[0]\n    timeString = array[1]\n  }\n\n  if (timeString) {\n    var token = parseTokenTimezone.exec(timeString)\n    if (token) {\n      dateStrings.time = timeString.replace(token[1], '')\n      dateStrings.timezone = token[1]\n    } else {\n      dateStrings.time = timeString\n    }\n  }\n\n  return dateStrings\n}\n\nfunction parseYear (dateString, additionalDigits) {\n  var parseTokenYYY = parseTokensYYY[additionalDigits]\n  var parseTokenYYYYY = parseTokensYYYYY[additionalDigits]\n\n  var token\n\n  // YYYY or ±YYYYY\n  token = parseTokenYYYY.exec(dateString) || parseTokenYYYYY.exec(dateString)\n  if (token) {\n    var yearString = token[1]\n    return {\n      year: parseInt(yearString, 10),\n      restDateString: dateString.slice(yearString.length)\n    }\n  }\n\n  // YY or ±YYY\n  token = parseTokenYY.exec(dateString) || parseTokenYYY.exec(dateString)\n  if (token) {\n    var centuryString = token[1]\n    return {\n      year: parseInt(centuryString, 10) * 100,\n      restDateString: dateString.slice(centuryString.length)\n    }\n  }\n\n  // Invalid ISO-formatted year\n  return {\n    year: null\n  }\n}\n\nfunction parseDate (dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) {\n    return null\n  }\n\n  var token\n  var date\n  var month\n  var week\n\n  // YYYY\n  if (dateString.length === 0) {\n    date = new Date(0)\n    date.setUTCFullYear(year)\n    return date\n  }\n\n  // YYYY-MM\n  token = parseTokenMM.exec(dateString)\n  if (token) {\n    date = new Date(0)\n    month = parseInt(token[1], 10) - 1\n    date.setUTCFullYear(year, month)\n    return date\n  }\n\n  // YYYY-DDD or YYYYDDD\n  token = parseTokenDDD.exec(dateString)\n  if (token) {\n    date = new Date(0)\n    var dayOfYear = parseInt(token[1], 10)\n    date.setUTCFullYear(year, 0, dayOfYear)\n    return date\n  }\n\n  // YYYY-MM-DD or YYYYMMDD\n  token = parseTokenMMDD.exec(dateString)\n  if (token) {\n    date = new Date(0)\n    month = parseInt(token[1], 10) - 1\n    var day = parseInt(token[2], 10)\n    date.setUTCFullYear(year, month, day)\n    return date\n  }\n\n  // YYYY-Www or YYYYWww\n  token = parseTokenWww.exec(dateString)\n  if (token) {\n    week = parseInt(token[1], 10) - 1\n    return dayOfISOYear(year, week)\n  }\n\n  // YYYY-Www-D or YYYYWwwD\n  token = parseTokenWwwD.exec(dateString)\n  if (token) {\n    week = parseInt(token[1], 10) - 1\n    var dayOfWeek = parseInt(token[2], 10) - 1\n    return dayOfISOYear(year, week, dayOfWeek)\n  }\n\n  // Invalid ISO-formatted date\n  return null\n}\n\nfunction parseTime (timeString) {\n  var token\n  var hours\n  var minutes\n\n  // hh\n  token = parseTokenHH.exec(timeString)\n  if (token) {\n    hours = parseFloat(token[1].replace(',', '.'))\n    return (hours % 24) * MILLISECONDS_IN_HOUR\n  }\n\n  // hh:mm or hhmm\n  token = parseTokenHHMM.exec(timeString)\n  if (token) {\n    hours = parseInt(token[1], 10)\n    minutes = parseFloat(token[2].replace(',', '.'))\n    return (hours % 24) * MILLISECONDS_IN_HOUR +\n      minutes * MILLISECONDS_IN_MINUTE\n  }\n\n  // hh:mm:ss or hhmmss\n  token = parseTokenHHMMSS.exec(timeString)\n  if (token) {\n    hours = parseInt(token[1], 10)\n    minutes = parseInt(token[2], 10)\n    var seconds = parseFloat(token[3].replace(',', '.'))\n    return (hours % 24) * MILLISECONDS_IN_HOUR +\n      minutes * MILLISECONDS_IN_MINUTE +\n      seconds * 1000\n  }\n\n  // Invalid ISO-formatted time\n  return null\n}\n\nfunction parseTimezone (timezoneString) {\n  var token\n  var absoluteOffset\n\n  // Z\n  token = parseTokenTimezoneZ.exec(timezoneString)\n  if (token) {\n    return 0\n  }\n\n  // ±hh\n  token = parseTokenTimezoneHH.exec(timezoneString)\n  if (token) {\n    absoluteOffset = parseInt(token[2], 10) * 60\n    return (token[1] === '+') ? -absoluteOffset : absoluteOffset\n  }\n\n  // ±hh:mm or ±hhmm\n  token = parseTokenTimezoneHHMM.exec(timezoneString)\n  if (token) {\n    absoluteOffset = parseInt(token[2], 10) * 60 + parseInt(token[3], 10)\n    return (token[1] === '+') ? -absoluteOffset : absoluteOffset\n  }\n\n  return 0\n}\n\nfunction dayOfISOYear (isoYear, week, day) {\n  week = week || 0\n  day = day || 0\n  var date = new Date(0)\n  date.setUTCFullYear(isoYear, 0, 4)\n  var fourthOfJanuaryDay = date.getUTCDay() || 7\n  var diff = week * 7 + day + 1 - fourthOfJanuaryDay\n  date.setUTCDate(date.getUTCDate() + diff)\n  return date\n}\n\nmodule.exports = parse\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/date-fns/parse/index.js\n// module id = 225\n// module chunks = 2","var startOfWeek = require('../start_of_week/index.js')\n\n/**\n * @category ISO Week Helpers\n * @summary Return the start of an ISO week for the given date.\n *\n * @description\n * Return the start of an ISO week for the given date.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param {Date|String|Number} date - the original date\n * @returns {Date} the start of an ISO week\n *\n * @example\n * // The start of an ISO week for 2 September 2014 11:55:00:\n * var result = startOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\nfunction startOfISOWeek (dirtyDate) {\n  return startOfWeek(dirtyDate, {weekStartsOn: 1})\n}\n\nmodule.exports = startOfISOWeek\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/date-fns/start_of_iso_week/index.js\n// module id = 264\n// module chunks = 2","/**\n * @category Common Helpers\n * @summary Is the given argument an instance of Date?\n *\n * @description\n * Is the given argument an instance of Date?\n *\n * @param {*} argument - the argument to check\n * @returns {Boolean} the given argument is an instance of Date\n *\n * @example\n * // Is 'mayonnaise' a Date?\n * var result = isDate('mayonnaise')\n * //=> false\n */\nfunction isDate (argument) {\n  return argument instanceof Date\n}\n\nmodule.exports = isDate\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/date-fns/is_date/index.js\n// module id = 265\n// module chunks = 2","var parse = require('../parse/index.js')\n\n/**\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|String|Number} date - the original date\n * @param {Object} [options] - the object with options\n * @param {Number} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date} the start of a week\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * var result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * var result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), {weekStartsOn: 1})\n * //=> Mon Sep 01 2014 00:00:00\n */\nfunction startOfWeek (dirtyDate, dirtyOptions) {\n  var weekStartsOn = dirtyOptions ? (Number(dirtyOptions.weekStartsOn) || 0) : 0\n\n  var date = parse(dirtyDate)\n  var day = date.getDay()\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn\n\n  date.setDate(date.getDate() - diff)\n  date.setHours(0, 0, 0, 0)\n  return date\n}\n\nmodule.exports = startOfWeek\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/date-fns/start_of_week/index.js\n// module id = 266\n// module chunks = 2","var parse = require('../parse/index.js')\n\n/**\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|String|Number} date - the original date\n * @returns {Date} the start of a day\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * var result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\nfunction startOfDay (dirtyDate) {\n  var date = parse(dirtyDate)\n  date.setHours(0, 0, 0, 0)\n  return date\n}\n\nmodule.exports = startOfDay\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/date-fns/start_of_day/index.js\n// module id = 267\n// module chunks = 2","var parse = require('../parse/index.js')\nvar startOfISOWeek = require('../start_of_iso_week/index.js')\n\n/**\n * @category ISO Week-Numbering Year Helpers\n * @summary Get the ISO week-numbering year of the given date.\n *\n * @description\n * Get the ISO week-numbering year of the given date,\n * which always starts 3 days before the year's first Thursday.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param {Date|String|Number} date - the given date\n * @returns {Number} the ISO week-numbering year\n *\n * @example\n * // Which ISO-week numbering year is 2 January 2005?\n * var result = getISOYear(new Date(2005, 0, 2))\n * //=> 2004\n */\nfunction getISOYear (dirtyDate) {\n  var date = parse(dirtyDate)\n  var year = date.getFullYear()\n\n  var fourthOfJanuaryOfNextYear = new Date(0)\n  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4)\n  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0)\n  var startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear)\n\n  var fourthOfJanuaryOfThisYear = new Date(0)\n  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4)\n  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0)\n  var startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear)\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year\n  } else {\n    return year - 1\n  }\n}\n\nmodule.exports = getISOYear\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/date-fns/get_iso_year/index.js\n// module id = 268\n// module chunks = 2","var addDays = require('../add_days/index.js')\n\n/**\n * @category Week Helpers\n * @summary Add the specified number of weeks to the given date.\n *\n * @description\n * Add the specified number of week to the given date.\n *\n * @param {Date|String|Number} date - the date to be changed\n * @param {Number} amount - the amount of weeks to be added\n * @returns {Date} the new date with the weeks added\n *\n * @example\n * // Add 4 weeks to 1 September 2014:\n * var result = addWeeks(new Date(2014, 8, 1), 4)\n * //=> Mon Sep 29 2014 00:00:00\n */\nfunction addWeeks (dirtyDate, dirtyAmount) {\n  var amount = Number(dirtyAmount)\n  var days = amount * 7\n  return addDays(dirtyDate, days)\n}\n\nmodule.exports = addWeeks\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/date-fns/add_weeks/index.js\n// module id = 271\n// module chunks = 2","var parse = require('../parse/index.js')\n\n/**\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * @param {Date|String|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be added\n * @returns {Date} the new date with the days added\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * var result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\nfunction addDays (dirtyDate, dirtyAmount) {\n  var date = parse(dirtyDate)\n  var amount = Number(dirtyAmount)\n  date.setDate(date.getDate() + amount)\n  return date\n}\n\nmodule.exports = addDays\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/date-fns/add_days/index.js\n// module id = 272\n// module chunks = 2","var parse = require('../parse/index.js')\n\n/**\n * @category Week Helpers\n * @summary Return the end of a week for the given date.\n *\n * @description\n * Return the end of a week for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|String|Number} date - the original date\n * @param {Object} [options] - the object with options\n * @param {Number} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date} the end of a week\n *\n * @example\n * // The end of a week for 2 September 2014 11:55:00:\n * var result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sat Sep 06 2014 23:59:59.999\n *\n * @example\n * // If the week starts on Monday, the end of the week for 2 September 2014 11:55:00:\n * var result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0), {weekStartsOn: 1})\n * //=> Sun Sep 07 2014 23:59:59.999\n */\nfunction endOfWeek (dirtyDate, dirtyOptions) {\n  var weekStartsOn = dirtyOptions ? (Number(dirtyOptions.weekStartsOn) || 0) : 0\n\n  var date = parse(dirtyDate)\n  var day = date.getDay()\n  var diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn)\n\n  date.setDate(date.getDate() + diff)\n  date.setHours(23, 59, 59, 999)\n  return date\n}\n\nmodule.exports = endOfWeek\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/date-fns/end_of_week/index.js\n// module id = 273\n// module chunks = 2","var parse = require('../parse/index.js')\n\n/**\n * @category Day Helpers\n * @summary Return the array of dates within the specified range.\n *\n * @description\n * Return the array of dates within the specified range.\n *\n * @param {Date|String|Number} startDate - the first date\n * @param {Date|String|Number} endDate - the last date\n * @returns {Date[]} the array with starts of days from the day of startDate to the day of endDate\n * @throws {Error} startDate cannot be after endDate\n *\n * @example\n * // Each day between 6 October 2014 and 10 October 2014:\n * var result = eachDay(\n *   new Date(2014, 9, 6),\n *   new Date(2014, 9, 10)\n * )\n * //=> [\n * //   Mon Oct 06 2014 00:00:00,\n * //   Tue Oct 07 2014 00:00:00,\n * //   Wed Oct 08 2014 00:00:00,\n * //   Thu Oct 09 2014 00:00:00,\n * //   Fri Oct 10 2014 00:00:00\n * // ]\n */\nfunction eachDay (dirtyStartDate, dirtyEndDate) {\n  var startDate = parse(dirtyStartDate)\n  var endDate = parse(dirtyEndDate)\n\n  var endTime = endDate.getTime()\n\n  if (startDate.getTime() > endTime) {\n    throw new Error('The first date cannot be after the second date')\n  }\n\n  var dates = []\n\n  var currentDate = startDate\n  currentDate.setHours(0, 0, 0, 0)\n\n  while (currentDate.getTime() <= endTime) {\n    dates.push(parse(currentDate))\n    currentDate.setDate(currentDate.getDate() + 1)\n  }\n\n  return dates\n}\n\nmodule.exports = eachDay\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/date-fns/each_day/index.js\n// module id = 274\n// module chunks = 2","import React from 'react';\nimport styled from 'styled-components';\n\nimport format from 'date-fns/format';\nimport isPast from 'date-fns/is_past'\nimport isToday from 'date-fns/is_today';\nimport isFirstDayOfMonth from 'date-fns/is_first_day_of_month'\nimport getMonth from 'date-fns/get_month';\n\nimport TrackableLink from '../TrackableLink';\n\nconst DAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\nconst MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\nconst Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  width: 100%;\n  border-bottom: 1px solid #eaeaea;\n`;\n\nconst WeekDay = styled.div`\n  width: calc(100% / 7);\n  font-weight: 400;\n  margin-bottom: 0.8rem;\n`;\n\nconst Day = styled.div`\n  height: 6rem;\n  width: calc(100% / 7);\n  box-sizing: border-box;\n  border-top: 1px solid #eaeaea;\n  border-left: 1px solid #eaeaea;\n  padding: 0.4rem 0.4rem 0.2rem 0.4rem;\n  display: flex;\n  justify-content: space-between;\n  \n  ${props => !!props.isPast && 'opacity: 0.25;'}\n  ${props => !!props.isToday && 'opacity: 1; font-weight: 400; color: red;'}\n  \n  &:nth-child(7n) {\n    border-right: 1px solid #eaeaea;\n  }\n`;\n\nconst DateLabel = styled.div`\n  align-self: flex-end;\n  font-size: 1.2rem;\n`;\n\nconst EventIcons = styled.div`\n`;\n\nconst Calendar = ({ dateRange, events }) => {\n  const renderWeekDay = (day) => (\n    <WeekDay key={day}>\n      { day }\n    </WeekDay>\n  );\n\n  const renderEvents = (date) =>\n    events\n      .filter((e) => format(date, 'YYYY-MM-DD') === e.fields.date)\n      .map((event) => {\n        const { badge, communityName } = event.fields.community.fields;\n\n        return (\n          <TrackableLink href={event.fields.url} target=\"_blank\" key={event.fields.url}>\n            <img src={badge.fields.file.url} alt={communityName} width={40} height={40}/>\n          </TrackableLink>\n        );\n      });\n\n  const renderDay = (date, index) => (\n    <Day key={index} isToday={isToday(date)} isPast={isPast(date)}>\n      <EventIcons>\n        { renderEvents(date) }\n      </EventIcons>\n\n      <DateLabel>\n        { isFirstDayOfMonth(date) && MONTHS[getMonth(date)] }\n        &nbsp;\n        { date.getDate() }\n      </DateLabel>\n    </Day>\n  );\n\n  return (\n    <Container>\n      { DAYS.map(renderWeekDay) }\n      { dateRange.map(renderDay) }\n    </Container>\n  );\n};\n\nexport default Calendar;\n\n\n// WEBPACK FOOTER //\n// ./src/components/events/Calendar.js","var getDayOfYear = require('../get_day_of_year/index.js')\nvar getISOWeek = require('../get_iso_week/index.js')\nvar getISOYear = require('../get_iso_year/index.js')\nvar parse = require('../parse/index.js')\nvar isValid = require('../is_valid/index.js')\nvar enLocale = require('../locale/en/index.js')\n\n/**\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format.\n *\n * Accepted tokens:\n * | Unit                    | Token | Result examples                  |\n * |-------------------------|-------|----------------------------------|\n * | Month                   | M     | 1, 2, ..., 12                    |\n * |                         | Mo    | 1st, 2nd, ..., 12th              |\n * |                         | MM    | 01, 02, ..., 12                  |\n * |                         | MMM   | Jan, Feb, ..., Dec               |\n * |                         | MMMM  | January, February, ..., December |\n * | Quarter                 | Q     | 1, 2, 3, 4                       |\n * |                         | Qo    | 1st, 2nd, 3rd, 4th               |\n * | Day of month            | D     | 1, 2, ..., 31                    |\n * |                         | Do    | 1st, 2nd, ..., 31st              |\n * |                         | DD    | 01, 02, ..., 31                  |\n * | Day of year             | DDD   | 1, 2, ..., 366                   |\n * |                         | DDDo  | 1st, 2nd, ..., 366th             |\n * |                         | DDDD  | 001, 002, ..., 366               |\n * | Day of week             | d     | 0, 1, ..., 6                     |\n * |                         | do    | 0th, 1st, ..., 6th               |\n * |                         | dd    | Su, Mo, ..., Sa                  |\n * |                         | ddd   | Sun, Mon, ..., Sat               |\n * |                         | dddd  | Sunday, Monday, ..., Saturday    |\n * | Day of ISO week         | E     | 1, 2, ..., 7                     |\n * | ISO week                | W     | 1, 2, ..., 53                    |\n * |                         | Wo    | 1st, 2nd, ..., 53rd              |\n * |                         | WW    | 01, 02, ..., 53                  |\n * | Year                    | YY    | 00, 01, ..., 99                  |\n * |                         | YYYY  | 1900, 1901, ..., 2099            |\n * | ISO week-numbering year | GG    | 00, 01, ..., 99                  |\n * |                         | GGGG  | 1900, 1901, ..., 2099            |\n * | AM/PM                   | A     | AM, PM                           |\n * |                         | a     | am, pm                           |\n * |                         | aa    | a.m., p.m.                       |\n * | Hour                    | H     | 0, 1, ... 23                     |\n * |                         | HH    | 00, 01, ... 23                   |\n * |                         | h     | 1, 2, ..., 12                    |\n * |                         | hh    | 01, 02, ..., 12                  |\n * | Minute                  | m     | 0, 1, ..., 59                    |\n * |                         | mm    | 00, 01, ..., 59                  |\n * | Second                  | s     | 0, 1, ..., 59                    |\n * |                         | ss    | 00, 01, ..., 59                  |\n * | 1/10 of second          | S     | 0, 1, ..., 9                     |\n * | 1/100 of second         | SS    | 00, 01, ..., 99                  |\n * | Millisecond             | SSS   | 000, 001, ..., 999               |\n * | Timezone                | Z     | -01:00, +00:00, ... +12:00       |\n * |                         | ZZ    | -0100, +0000, ..., +1200         |\n * | Seconds timestamp       | X     | 512969520                        |\n * | Milliseconds timestamp  | x     | 512969520900                     |\n *\n * The characters wrapped in square brackets are escaped.\n *\n * The result may vary by locale.\n *\n * @param {Date|String|Number} date - the original date\n * @param {String} [format='YYYY-MM-DDTHH:mm:ss.SSSZ'] - the string of tokens\n * @param {Object} [options] - the object with options\n * @param {Object} [options.locale=enLocale] - the locale object\n * @returns {String} the formatted date string\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * var result = format(\n *   new Date(2014, 1, 11),\n *   'MM/DD/YYYY'\n * )\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * var eoLocale = require('date-fns/locale/eo')\n * var result = format(\n *   new Date(2014, 6, 2),\n *   'Do [de] MMMM YYYY',\n *   {locale: eoLocale}\n * )\n * //=> '2-a de julio 2014'\n */\nfunction format (dirtyDate, dirtyFormatStr, dirtyOptions) {\n  var formatStr = dirtyFormatStr ? String(dirtyFormatStr) : 'YYYY-MM-DDTHH:mm:ss.SSSZ'\n  var options = dirtyOptions || {}\n\n  var locale = options.locale\n  var localeFormatters = enLocale.format.formatters\n  var formattingTokensRegExp = enLocale.format.formattingTokensRegExp\n  if (locale && locale.format && locale.format.formatters) {\n    localeFormatters = locale.format.formatters\n\n    if (locale.format.formattingTokensRegExp) {\n      formattingTokensRegExp = locale.format.formattingTokensRegExp\n    }\n  }\n\n  var date = parse(dirtyDate)\n\n  if (!isValid(date)) {\n    return 'Invalid Date'\n  }\n\n  var formatFn = buildFormatFn(formatStr, localeFormatters, formattingTokensRegExp)\n\n  return formatFn(date)\n}\n\nvar formatters = {\n  // Month: 1, 2, ..., 12\n  'M': function (date) {\n    return date.getMonth() + 1\n  },\n\n  // Month: 01, 02, ..., 12\n  'MM': function (date) {\n    return addLeadingZeros(date.getMonth() + 1, 2)\n  },\n\n  // Quarter: 1, 2, 3, 4\n  'Q': function (date) {\n    return Math.ceil((date.getMonth() + 1) / 3)\n  },\n\n  // Day of month: 1, 2, ..., 31\n  'D': function (date) {\n    return date.getDate()\n  },\n\n  // Day of month: 01, 02, ..., 31\n  'DD': function (date) {\n    return addLeadingZeros(date.getDate(), 2)\n  },\n\n  // Day of year: 1, 2, ..., 366\n  'DDD': function (date) {\n    return getDayOfYear(date)\n  },\n\n  // Day of year: 001, 002, ..., 366\n  'DDDD': function (date) {\n    return addLeadingZeros(getDayOfYear(date), 3)\n  },\n\n  // Day of week: 0, 1, ..., 6\n  'd': function (date) {\n    return date.getDay()\n  },\n\n  // Day of ISO week: 1, 2, ..., 7\n  'E': function (date) {\n    return date.getDay() || 7\n  },\n\n  // ISO week: 1, 2, ..., 53\n  'W': function (date) {\n    return getISOWeek(date)\n  },\n\n  // ISO week: 01, 02, ..., 53\n  'WW': function (date) {\n    return addLeadingZeros(getISOWeek(date), 2)\n  },\n\n  // Year: 00, 01, ..., 99\n  'YY': function (date) {\n    return addLeadingZeros(date.getFullYear(), 4).substr(2)\n  },\n\n  // Year: 1900, 1901, ..., 2099\n  'YYYY': function (date) {\n    return addLeadingZeros(date.getFullYear(), 4)\n  },\n\n  // ISO week-numbering year: 00, 01, ..., 99\n  'GG': function (date) {\n    return String(getISOYear(date)).substr(2)\n  },\n\n  // ISO week-numbering year: 1900, 1901, ..., 2099\n  'GGGG': function (date) {\n    return getISOYear(date)\n  },\n\n  // Hour: 0, 1, ... 23\n  'H': function (date) {\n    return date.getHours()\n  },\n\n  // Hour: 00, 01, ..., 23\n  'HH': function (date) {\n    return addLeadingZeros(date.getHours(), 2)\n  },\n\n  // Hour: 1, 2, ..., 12\n  'h': function (date) {\n    var hours = date.getHours()\n    if (hours === 0) {\n      return 12\n    } else if (hours > 12) {\n      return hours % 12\n    } else {\n      return hours\n    }\n  },\n\n  // Hour: 01, 02, ..., 12\n  'hh': function (date) {\n    return addLeadingZeros(formatters['h'](date), 2)\n  },\n\n  // Minute: 0, 1, ..., 59\n  'm': function (date) {\n    return date.getMinutes()\n  },\n\n  // Minute: 00, 01, ..., 59\n  'mm': function (date) {\n    return addLeadingZeros(date.getMinutes(), 2)\n  },\n\n  // Second: 0, 1, ..., 59\n  's': function (date) {\n    return date.getSeconds()\n  },\n\n  // Second: 00, 01, ..., 59\n  'ss': function (date) {\n    return addLeadingZeros(date.getSeconds(), 2)\n  },\n\n  // 1/10 of second: 0, 1, ..., 9\n  'S': function (date) {\n    return Math.floor(date.getMilliseconds() / 100)\n  },\n\n  // 1/100 of second: 00, 01, ..., 99\n  'SS': function (date) {\n    return addLeadingZeros(Math.floor(date.getMilliseconds() / 10), 2)\n  },\n\n  // Millisecond: 000, 001, ..., 999\n  'SSS': function (date) {\n    return addLeadingZeros(date.getMilliseconds(), 3)\n  },\n\n  // Timezone: -01:00, +00:00, ... +12:00\n  'Z': function (date) {\n    return formatTimezone(date.getTimezoneOffset(), ':')\n  },\n\n  // Timezone: -0100, +0000, ... +1200\n  'ZZ': function (date) {\n    return formatTimezone(date.getTimezoneOffset())\n  },\n\n  // Seconds timestamp: 512969520\n  'X': function (date) {\n    return Math.floor(date.getTime() / 1000)\n  },\n\n  // Milliseconds timestamp: 512969520900\n  'x': function (date) {\n    return date.getTime()\n  }\n}\n\nfunction buildFormatFn (formatStr, localeFormatters, formattingTokensRegExp) {\n  var array = formatStr.match(formattingTokensRegExp)\n  var length = array.length\n\n  var i\n  var formatter\n  for (i = 0; i < length; i++) {\n    formatter = localeFormatters[array[i]] || formatters[array[i]]\n    if (formatter) {\n      array[i] = formatter\n    } else {\n      array[i] = removeFormattingTokens(array[i])\n    }\n  }\n\n  return function (date) {\n    var output = ''\n    for (var i = 0; i < length; i++) {\n      if (array[i] instanceof Function) {\n        output += array[i](date, formatters)\n      } else {\n        output += array[i]\n      }\n    }\n    return output\n  }\n}\n\nfunction removeFormattingTokens (input) {\n  if (input.match(/\\[[\\s\\S]/)) {\n    return input.replace(/^\\[|]$/g, '')\n  }\n  return input.replace(/\\\\/g, '')\n}\n\nfunction formatTimezone (offset, delimeter) {\n  delimeter = delimeter || ''\n  var sign = offset > 0 ? '-' : '+'\n  var absOffset = Math.abs(offset)\n  var hours = Math.floor(absOffset / 60)\n  var minutes = absOffset % 60\n  return sign + addLeadingZeros(hours, 2) + delimeter + addLeadingZeros(minutes, 2)\n}\n\nfunction addLeadingZeros (number, targetLength) {\n  var output = Math.abs(number).toString()\n  while (output.length < targetLength) {\n    output = '0' + output\n  }\n  return output\n}\n\nmodule.exports = format\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/date-fns/format/index.js\n// module id = 276\n// module chunks = 2","var parse = require('../parse/index.js')\nvar startOfYear = require('../start_of_year/index.js')\nvar differenceInCalendarDays = require('../difference_in_calendar_days/index.js')\n\n/**\n * @category Day Helpers\n * @summary Get the day of the year of the given date.\n *\n * @description\n * Get the day of the year of the given date.\n *\n * @param {Date|String|Number} date - the given date\n * @returns {Number} the day of year\n *\n * @example\n * // Which day of the year is 2 July 2014?\n * var result = getDayOfYear(new Date(2014, 6, 2))\n * //=> 183\n */\nfunction getDayOfYear (dirtyDate) {\n  var date = parse(dirtyDate)\n  var diff = differenceInCalendarDays(date, startOfYear(date))\n  var dayOfYear = diff + 1\n  return dayOfYear\n}\n\nmodule.exports = getDayOfYear\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/date-fns/get_day_of_year/index.js\n// module id = 277\n// module chunks = 2","var parse = require('../parse/index.js')\n\n/**\n * @category Year Helpers\n * @summary Return the start of a year for the given date.\n *\n * @description\n * Return the start of a year for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|String|Number} date - the original date\n * @returns {Date} the start of a year\n *\n * @example\n * // The start of a year for 2 September 2014 11:55:00:\n * var result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Jan 01 2014 00:00:00\n */\nfunction startOfYear (dirtyDate) {\n  var cleanDate = parse(dirtyDate)\n  var date = new Date(0)\n  date.setFullYear(cleanDate.getFullYear(), 0, 1)\n  date.setHours(0, 0, 0, 0)\n  return date\n}\n\nmodule.exports = startOfYear\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/date-fns/start_of_year/index.js\n// module id = 278\n// module chunks = 2","var startOfDay = require('../start_of_day/index.js')\n\nvar MILLISECONDS_IN_MINUTE = 60000\nvar MILLISECONDS_IN_DAY = 86400000\n\n/**\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates.\n *\n * @param {Date|String|Number} dateLeft - the later date\n * @param {Date|String|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar days\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * var result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n */\nfunction differenceInCalendarDays (dirtyDateLeft, dirtyDateRight) {\n  var startOfDayLeft = startOfDay(dirtyDateLeft)\n  var startOfDayRight = startOfDay(dirtyDateRight)\n\n  var timestampLeft = startOfDayLeft.getTime() -\n    startOfDayLeft.getTimezoneOffset() * MILLISECONDS_IN_MINUTE\n  var timestampRight = startOfDayRight.getTime() -\n    startOfDayRight.getTimezoneOffset() * MILLISECONDS_IN_MINUTE\n\n  // Round the number of days to the nearest integer\n  // because the number of milliseconds in a day is not constant\n  // (e.g. it's different in the day of the daylight saving time clock shift)\n  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY)\n}\n\nmodule.exports = differenceInCalendarDays\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/date-fns/difference_in_calendar_days/index.js\n// module id = 279\n// module chunks = 2","var parse = require('../parse/index.js')\nvar startOfISOWeek = require('../start_of_iso_week/index.js')\nvar startOfISOYear = require('../start_of_iso_year/index.js')\n\nvar MILLISECONDS_IN_WEEK = 604800000\n\n/**\n * @category ISO Week Helpers\n * @summary Get the ISO week of the given date.\n *\n * @description\n * Get the ISO week of the given date.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param {Date|String|Number} date - the given date\n * @returns {Number} the ISO week\n *\n * @example\n * // Which week of the ISO-week numbering year is 2 January 2005?\n * var result = getISOWeek(new Date(2005, 0, 2))\n * //=> 53\n */\nfunction getISOWeek (dirtyDate) {\n  var date = parse(dirtyDate)\n  var diff = startOfISOWeek(date).getTime() - startOfISOYear(date).getTime()\n\n  // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1\n}\n\nmodule.exports = getISOWeek\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/date-fns/get_iso_week/index.js\n// module id = 280\n// module chunks = 2","var getISOYear = require('../get_iso_year/index.js')\nvar startOfISOWeek = require('../start_of_iso_week/index.js')\n\n/**\n * @category ISO Week-Numbering Year Helpers\n * @summary Return the start of an ISO week-numbering year for the given date.\n *\n * @description\n * Return the start of an ISO week-numbering year,\n * which always starts 3 days before the year's first Thursday.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param {Date|String|Number} date - the original date\n * @returns {Date} the start of an ISO year\n *\n * @example\n * // The start of an ISO week-numbering year for 2 July 2005:\n * var result = startOfISOYear(new Date(2005, 6, 2))\n * //=> Mon Jan 03 2005 00:00:00\n */\nfunction startOfISOYear (dirtyDate) {\n  var year = getISOYear(dirtyDate)\n  var fourthOfJanuary = new Date(0)\n  fourthOfJanuary.setFullYear(year, 0, 4)\n  fourthOfJanuary.setHours(0, 0, 0, 0)\n  var date = startOfISOWeek(fourthOfJanuary)\n  return date\n}\n\nmodule.exports = startOfISOYear\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/date-fns/start_of_iso_year/index.js\n// module id = 281\n// module chunks = 2","var isDate = require('../is_date/index.js')\n\n/**\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @param {Date} date - the date to check\n * @returns {Boolean} the date is valid\n * @throws {TypeError} argument must be an instance of Date\n *\n * @example\n * // For the valid date:\n * var result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the invalid date:\n * var result = isValid(new Date(''))\n * //=> false\n */\nfunction isValid (dirtyDate) {\n  if (isDate(dirtyDate)) {\n    return !isNaN(dirtyDate)\n  } else {\n    throw new TypeError(toString.call(dirtyDate) + ' is not an instance of Date')\n  }\n}\n\nmodule.exports = isValid\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/date-fns/is_valid/index.js\n// module id = 282\n// module chunks = 2","var buildDistanceInWordsLocale = require('./build_distance_in_words_locale/index.js')\nvar buildFormatLocale = require('./build_format_locale/index.js')\n\n/**\n * @category Locales\n * @summary English locale.\n */\nmodule.exports = {\n  distanceInWords: buildDistanceInWordsLocale(),\n  format: buildFormatLocale()\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/date-fns/locale/en/index.js\n// module id = 283\n// module chunks = 2","function buildDistanceInWordsLocale () {\n  var distanceInWordsLocale = {\n    lessThanXSeconds: {\n      one: 'less than a second',\n      other: 'less than {{count}} seconds'\n    },\n\n    xSeconds: {\n      one: '1 second',\n      other: '{{count}} seconds'\n    },\n\n    halfAMinute: 'half a minute',\n\n    lessThanXMinutes: {\n      one: 'less than a minute',\n      other: 'less than {{count}} minutes'\n    },\n\n    xMinutes: {\n      one: '1 minute',\n      other: '{{count}} minutes'\n    },\n\n    aboutXHours: {\n      one: 'about 1 hour',\n      other: 'about {{count}} hours'\n    },\n\n    xHours: {\n      one: '1 hour',\n      other: '{{count}} hours'\n    },\n\n    xDays: {\n      one: '1 day',\n      other: '{{count}} days'\n    },\n\n    aboutXMonths: {\n      one: 'about 1 month',\n      other: 'about {{count}} months'\n    },\n\n    xMonths: {\n      one: '1 month',\n      other: '{{count}} months'\n    },\n\n    aboutXYears: {\n      one: 'about 1 year',\n      other: 'about {{count}} years'\n    },\n\n    xYears: {\n      one: '1 year',\n      other: '{{count}} years'\n    },\n\n    overXYears: {\n      one: 'over 1 year',\n      other: 'over {{count}} years'\n    },\n\n    almostXYears: {\n      one: 'almost 1 year',\n      other: 'almost {{count}} years'\n    }\n  }\n\n  function localize (token, count, options) {\n    options = options || {}\n\n    var result\n    if (typeof distanceInWordsLocale[token] === 'string') {\n      result = distanceInWordsLocale[token]\n    } else if (count === 1) {\n      result = distanceInWordsLocale[token].one\n    } else {\n      result = distanceInWordsLocale[token].other.replace('{{count}}', count)\n    }\n\n    if (options.addSuffix) {\n      if (options.comparison > 0) {\n        return 'in ' + result\n      } else {\n        return result + ' ago'\n      }\n    }\n\n    return result\n  }\n\n  return {\n    localize: localize\n  }\n}\n\nmodule.exports = buildDistanceInWordsLocale\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/date-fns/locale/en/build_distance_in_words_locale/index.js\n// module id = 284\n// module chunks = 2","var buildFormattingTokensRegExp = require('../../_lib/build_formatting_tokens_reg_exp/index.js')\n\nfunction buildFormatLocale () {\n  // Note: in English, the names of days of the week and months are capitalized.\n  // If you are making a new locale based on this one, check if the same is true for the language you're working on.\n  // Generally, formatted dates should look like they are in the middle of a sentence,\n  // e.g. in Spanish language the weekdays and months should be in the lowercase.\n  var months3char = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n  var monthsFull = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n  var weekdays2char = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa']\n  var weekdays3char = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\n  var weekdaysFull = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n  var meridiemUppercase = ['AM', 'PM']\n  var meridiemLowercase = ['am', 'pm']\n  var meridiemFull = ['a.m.', 'p.m.']\n\n  var formatters = {\n    // Month: Jan, Feb, ..., Dec\n    'MMM': function (date) {\n      return months3char[date.getMonth()]\n    },\n\n    // Month: January, February, ..., December\n    'MMMM': function (date) {\n      return monthsFull[date.getMonth()]\n    },\n\n    // Day of week: Su, Mo, ..., Sa\n    'dd': function (date) {\n      return weekdays2char[date.getDay()]\n    },\n\n    // Day of week: Sun, Mon, ..., Sat\n    'ddd': function (date) {\n      return weekdays3char[date.getDay()]\n    },\n\n    // Day of week: Sunday, Monday, ..., Saturday\n    'dddd': function (date) {\n      return weekdaysFull[date.getDay()]\n    },\n\n    // AM, PM\n    'A': function (date) {\n      return (date.getHours() / 12) >= 1 ? meridiemUppercase[1] : meridiemUppercase[0]\n    },\n\n    // am, pm\n    'a': function (date) {\n      return (date.getHours() / 12) >= 1 ? meridiemLowercase[1] : meridiemLowercase[0]\n    },\n\n    // a.m., p.m.\n    'aa': function (date) {\n      return (date.getHours() / 12) >= 1 ? meridiemFull[1] : meridiemFull[0]\n    }\n  }\n\n  // Generate ordinal version of formatters: M -> Mo, D -> Do, etc.\n  var ordinalFormatters = ['M', 'D', 'DDD', 'd', 'Q', 'W']\n  ordinalFormatters.forEach(function (formatterToken) {\n    formatters[formatterToken + 'o'] = function (date, formatters) {\n      return ordinal(formatters[formatterToken](date))\n    }\n  })\n\n  return {\n    formatters: formatters,\n    formattingTokensRegExp: buildFormattingTokensRegExp(formatters)\n  }\n}\n\nfunction ordinal (number) {\n  var rem100 = number % 100\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + 'st'\n      case 2:\n        return number + 'nd'\n      case 3:\n        return number + 'rd'\n    }\n  }\n  return number + 'th'\n}\n\nmodule.exports = buildFormatLocale\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/date-fns/locale/en/build_format_locale/index.js\n// module id = 285\n// module chunks = 2","var commonFormatterKeys = [\n  'M', 'MM', 'Q', 'D', 'DD', 'DDD', 'DDDD', 'd',\n  'E', 'W', 'WW', 'YY', 'YYYY', 'GG', 'GGGG',\n  'H', 'HH', 'h', 'hh', 'm', 'mm',\n  's', 'ss', 'S', 'SS', 'SSS',\n  'Z', 'ZZ', 'X', 'x'\n]\n\nfunction buildFormattingTokensRegExp (formatters) {\n  var formatterKeys = []\n  for (var key in formatters) {\n    if (formatters.hasOwnProperty(key)) {\n      formatterKeys.push(key)\n    }\n  }\n\n  var formattingTokens = commonFormatterKeys\n    .concat(formatterKeys)\n    .sort()\n    .reverse()\n  var formattingTokensRegExp = new RegExp(\n    '(\\\\[[^\\\\[]*\\\\])|(\\\\\\\\)?' + '(' + formattingTokens.join('|') + '|.)', 'g'\n  )\n\n  return formattingTokensRegExp\n}\n\nmodule.exports = buildFormattingTokensRegExp\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/date-fns/locale/_lib/build_formatting_tokens_reg_exp/index.js\n// module id = 286\n// module chunks = 2","var parse = require('../parse/index.js')\n\n/**\n * @category Common Helpers\n * @summary Is the given date in the past?\n *\n * @description\n * Is the given date in the past?\n *\n * @param {Date|String|Number} date - the date to check\n * @returns {Boolean} the date is in the past\n *\n * @example\n * // If today is 6 October 2014, is 2 July 2014 in the past?\n * var result = isPast(new Date(2014, 6, 2))\n * //=> true\n */\nfunction isPast (dirtyDate) {\n  return parse(dirtyDate).getTime() < new Date().getTime()\n}\n\nmodule.exports = isPast\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/date-fns/is_past/index.js\n// module id = 287\n// module chunks = 2","var startOfDay = require('../start_of_day/index.js')\n\n/**\n * @category Day Helpers\n * @summary Is the given date today?\n *\n * @description\n * Is the given date today?\n *\n * @param {Date|String|Number} date - the date to check\n * @returns {Boolean} the date is today\n *\n * @example\n * // If today is 6 October 2014, is 6 October 14:00:00 today?\n * var result = isToday(new Date(2014, 9, 6, 14, 0))\n * //=> true\n */\nfunction isToday (dirtyDate) {\n  return startOfDay(dirtyDate).getTime() === startOfDay(new Date()).getTime()\n}\n\nmodule.exports = isToday\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/date-fns/is_today/index.js\n// module id = 288\n// module chunks = 2","var parse = require('../parse/index.js')\n\n/**\n * @category Month Helpers\n * @summary Is the given date the first day of a month?\n *\n * @description\n * Is the given date the first day of a month?\n *\n * @param {Date|String|Number} date - the date to check\n * @returns {Boolean} the date is the first day of a month\n *\n * @example\n * // Is 1 September 2014 the first day of a month?\n * var result = isFirstDayOfMonth(new Date(2014, 8, 1))\n * //=> true\n */\nfunction isFirstDayOfMonth (dirtyDate) {\n  return parse(dirtyDate).getDate() === 1\n}\n\nmodule.exports = isFirstDayOfMonth\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/date-fns/is_first_day_of_month/index.js\n// module id = 289\n// module chunks = 2","var parse = require('../parse/index.js')\n\n/**\n * @category Month Helpers\n * @summary Get the month of the given date.\n *\n * @description\n * Get the month of the given date.\n *\n * @param {Date|String|Number} date - the given date\n * @returns {Number} the month\n *\n * @example\n * // Which month is 29 February 2012?\n * var result = getMonth(new Date(2012, 1, 29))\n * //=> 1\n */\nfunction getMonth (dirtyDate) {\n  var date = parse(dirtyDate)\n  var month = date.getMonth()\n  return month\n}\n\nmodule.exports = getMonth\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/date-fns/get_month/index.js\n// module id = 290\n// module chunks = 2","export const getEvents = () => {\n  return fetch(`${global.apiServiceURL}/api/events`)\n    .then(response => response.json());\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/services/events.js"],"sourceRoot":""}